// @flow
import type {ExceptionData} from "../../Core/NativeExceptionsManager";
import type {LogBoxLogData} from "./LogBoxLog";

type ExtendedExceptionData = 
  & ExceptionData
  & {
    isComponentError: boolean,
    ...,
  };
type Category = string;
type CodeFrame = $ReadOnly<
  {|
    content: string,
    location: ?{
      row: number,
      column: number,
      ...,
    },
    fileName: string,
    
    // TODO: When React switched to using call stack frames,
    // we gained the ability to use the collapse flag, but
    // it is not integrated into the LogBox UI.
    collapse?: boolean,
  |},
>;
type Message = $ReadOnly<
  {|
    content: string,
    substitutions: $ReadOnlyArray<
      $ReadOnly<
        {|
          length: number,
          offset: number,
        |},
      >,
    >,
  |},
>;

type ComponentStack = $ReadOnlyArray<CodeFrame>;

declare function parseInterpolation(
  args: $ReadOnlyArray<mixed>
): $ReadOnly<
  {|
    category: Category,
    message: Message,
  |},
>;

declare function parseComponentStack(message: string): ComponentStack;

declare function parseLogBoxException(
  error: ExtendedExceptionData
): LogBoxLogData;

declare function parseLogBoxLog(
  args: $ReadOnlyArray<mixed>
): {|
  componentStack: ComponentStack,
  category: Category,
  message: Message,
|};
export type {ExtendedExceptionData};
export type {Category};
export type {CodeFrame};
export type {Message};

export type {ComponentStack};

export {parseInterpolation};

export {parseComponentStack};

export {parseLogBoxException};

export {parseLogBoxLog};
