// @flow
import type {HostComponent} from "../../Renderer/shims/ReactNativeTypes";
import type {SyntheticEvent} from "../../Types/CoreEventTypes";
import type {TextStyleProp} from "../../StyleSheet/StyleSheet";
import type {ProcessedColorValue} from "../../StyleSheet/processColor";

import * as React from "react";

type PickerIOSChangeEvent = SyntheticEvent<
  $ReadOnly<
    {|
      newValue: number | string,
      newIndex: number,
    |},
  >,
>;

type RCTPickerIOSItemType = $ReadOnly<
  {|
    label: ?Label,
    value: ?string,
    textColor: ?ProcessedColorValue,
  |},
>;

type Label = Stringish | number;

type NativeProps = $ReadOnly<
  {|
    items: $ReadOnlyArray<RCTPickerIOSItemType>,
    onChange: (event: PickerIOSChangeEvent) => void,
    selectedIndex: number,
    style?: ?TextStyleProp,
    testID?: ?string,
    accessibilityLabel?: ?string,
  |},
>;

type ComponentType = HostComponent<NativeProps>;

interface NativeCommands {
  +setNativeSelectedIndex: (
    viewRef: React.ElementRef<ComponentType>,
    index: number
  ) => void,
}

declare var Commands: NativeCommands;
export {Commands};

declare export default HostComponent<NativeProps>;
