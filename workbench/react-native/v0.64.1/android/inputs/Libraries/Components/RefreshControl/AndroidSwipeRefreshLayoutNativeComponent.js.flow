// @flow
import * as React from "react";

import type {HostComponent} from "../../Renderer/shims/ReactNativeTypes";

import type {DirectEventHandler} from "../../Types/CodegenTypes";
import type {Float} from "../../Types/CodegenTypes";
import type {Int32} from "../../Types/CodegenTypes";
import type {WithDefault} from "../../Types/CodegenTypes";
import type {ColorValue} from "../../StyleSheet/StyleSheet";
import type {ViewProps} from "../View/ViewPropTypes";

type NativeProps = $ReadOnly<
  {|
    ...ViewProps,
    
    /**
   * Whether the pull to refresh functionality is enabled.
   */
    enabled?: WithDefault<boolean, true>,
    /**
   * The colors (at least one) that will be used to draw the refresh indicator.
   */
    colors?: ?$ReadOnlyArray<ColorValue>,
    /**
   * The background color of the refresh indicator.
   */
    progressBackgroundColor?: ?ColorValue,
    /**
   * Size of the refresh indicator, see RefreshControl.SIZE.
   *
   * This type isn't currently accurate. It really is specific numbers
   * hard coded in the Android platform.
   *
   * Also, 1 isn't actually a safe default. We are able to set this here
   * because native code isn't currently consuming the generated artifact.
   * This will end up being
   * size?: WithDefault<'default' | 'large', 'default'>,
   */
    size?: WithDefault<Int32, 1>,
    /**
   * Progress view top offset
   */
    progressViewOffset?: WithDefault<Float, 0>,
    
    /**
   * Called when the view starts refreshing.
   */
    onRefresh?: ?DirectEventHandler<null>,
    
    /**
   * Whether the view should be indicating an active refresh.
   */
    refreshing: boolean,
  |},
>;

type NativeType = HostComponent<NativeProps>;

interface NativeCommands {
  +setNativeRefreshing: (
    viewRef: React.ElementRef<NativeType>,
    value: boolean
  ) => void,
}

declare var Commands: NativeCommands;
export {Commands};

declare export default NativeType;
