// @flow
import * as React from "react";

import type {ColorValue} from "../../StyleSheet/StyleSheet";
import type {ViewStyleProp} from "../../StyleSheet/StyleSheet";
import type {DirectEventHandler} from "../../Types/CodegenTypes";
import type {MeasureOnSuccessCallback} from "../../Renderer/shims/ReactNativeTypes";
import type {MeasureInWindowOnSuccessCallback} from "../../Renderer/shims/ReactNativeTypes";
import type {MeasureLayoutOnSuccessCallback} from "../../Renderer/shims/ReactNativeTypes";

type DrawerStates = 'Idle' | 'Dragging' | 'Settling';

type DrawerSlideEvent = $ReadOnly<
  {|
    offset: number,
  |},
>;

type Props = $ReadOnly<
  {|
    /**
   * Determines whether the keyboard gets dismissed in response to a drag.
   *   - 'none' (the default), drags do not dismiss the keyboard.
   *   - 'on-drag', the keyboard is dismissed when a drag begins.
   */
    keyboardDismissMode?: ?('none' | 'on-drag'),
    
    /**
   * Specifies the background color of the drawer. The default value is white.
   * If you want to set the opacity of the drawer, use rgba. Example:
   *
   * ```
   * return (
   *   <DrawerLayoutAndroid drawerBackgroundColor="rgba(0,0,0,0.5)">
   *   </DrawerLayoutAndroid>
   * );
   * ```
   */
    drawerBackgroundColor: ColorValue,
    
    /**
   * Specifies the side of the screen from which the drawer will slide in.
   */
    drawerPosition: ?('left' | 'right'),
    
    /**
   * Specifies the width of the drawer, more precisely the width of the view that be pulled in
   * from the edge of the window.
   */
    drawerWidth?: ?number,
    
    /**
   * Specifies the lock mode of the drawer. The drawer can be locked in 3 states:
   * - unlocked (default), meaning that the drawer will respond (open/close) to touch gestures.
   * - locked-closed, meaning that the drawer will stay closed and not respond to gestures.
   * - locked-open, meaning that the drawer will stay opened and not respond to gestures.
   * The drawer may still be opened and closed programmatically (`openDrawer`/`closeDrawer`).
   */
    drawerLockMode?: ?('unlocked' | 'locked-closed' | 'locked-open'),
    
    /**
   * Function called whenever there is an interaction with the navigation view.
   */
    onDrawerSlide?: ?DirectEventHandler<DrawerSlideEvent>,
    
    /**
   * Function called when the drawer state has changed. The drawer can be in 3 states:
   * - Idle, meaning there is no interaction with the navigation view happening at the time
   * - Dragging, meaning there is currently an interaction with the navigation view
   * - Settling, meaning that there was an interaction with the navigation view, and the
   * navigation view is now finishing its closing or opening animation
   */
    onDrawerStateChanged?: ?((state: DrawerStates) => mixed),
    
    /**
   * Function called whenever the navigation view has been opened.
   */
    onDrawerOpen?: ?(() => mixed),
    
    /**
   * Function called whenever the navigation view has been closed.
   */
    onDrawerClose?: ?(() => mixed),
    
    /**
   * The navigation view that will be rendered to the side of the screen and can be pulled in.
   */
    renderNavigationView: () => React.Element<any>,
    
    /**
   * Make the drawer take the entire screen and draw the background of the
   * status bar to allow it to open over the status bar. It will only have an
   * effect on API 21+.
   */
    statusBarBackgroundColor?: ?ColorValue,
    
    children?: React.Node,
    style?: ?ViewStyleProp,
  |},
>;

type State = {|
  statusBarBackgroundColor: ColorValue,
|};

declare class DrawerLayoutAndroid
  extends $1<Props, State> {
  get positions(): mixed,
  static defaultProps: {|
    drawerBackgroundColor: 'white',
  |},
  
  state: State,
  
  render(): React.Node,
  
  /**
   * Opens the drawer.
   */
  openDrawer(): void,
  
  /**
   * Closes the drawer.
   */
  closeDrawer(): void,
  
  /**
   * Closing and opening example
   * Note: To access the drawer you have to give it a ref
   *
   * Class component:
   *
   * render () {
   *   this.openDrawer = () => {
   *     this.refs.DRAWER.openDrawer()
   *   }
   *   this.closeDrawer = () => {
   *     this.refs.DRAWER.closeDrawer()
   *   }
   *   return (
   *     <DrawerLayoutAndroid ref={'DRAWER'}>
   *      {children}
   *     </DrawerLayoutAndroid>
   *   )
   * }
   *
   * Function component:
   *
   * const drawerRef = useRef()
   * const openDrawer = () => {
   *   drawerRef.current.openDrawer()
   * }
   * const closeDrawer = () => {
   *   drawerRef.current.closeDrawer()
   * }
   * return (
   *   <DrawerLayoutAndroid ref={drawerRef}>
   *     {children}
   *   </DrawerLayoutAndroid>
   * )
   */
  
  /**
   * Native methods
   */
  blur(): void,
  
  focus(): void,
  
  measure(callback: MeasureOnSuccessCallback): void,
  
  measureInWindow(callback: MeasureInWindowOnSuccessCallback): void,
  
  measureLayout(
    relativeToNativeNode: number,
    onSuccess: MeasureLayoutOnSuccessCallback,
    onFail?: () => void
  ): void,
  
  setNativeProps(nativeProps: Object): void,
}
declare var $1: typeof React.Component;

declare module.exports: typeof DrawerLayoutAndroid;
