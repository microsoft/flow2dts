// @flow
import Pressability from "../../Pressability/Pressability";

import type {AccessibilityActionEvent} from "../../Components/View/ViewAccessibility";
import type {AccessibilityActionInfo} from "../../Components/View/ViewAccessibility";
import type {AccessibilityRole} from "../../Components/View/ViewAccessibility";
import type {AccessibilityState} from "../../Components/View/ViewAccessibility";
import type {AccessibilityValue} from "../../Components/View/ViewAccessibility";
import type {EdgeInsetsProp} from "../../StyleSheet/EdgeInsetsPropType";
import type {BlurEvent} from "../../Types/CoreEventTypes";
import type {FocusEvent} from "../../Types/CoreEventTypes";
import type {LayoutEvent} from "../../Types/CoreEventTypes";
import type {PressEvent} from "../../Types/CoreEventTypes";

import * as React from "react";

type Props = $ReadOnly<
  {|
    accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,
    accessibilityElementsHidden?: ?boolean,
    accessibilityHint?: ?Stringish,
    accessibilityIgnoresInvertColors?: ?boolean,
    accessibilityLabel?: ?Stringish,
    accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),
    accessibilityRole?: ?AccessibilityRole,
    accessibilityState?: ?AccessibilityState,
    accessibilityValue?: ?AccessibilityValue,
    accessibilityViewIsModal?: ?boolean,
    accessible?: ?boolean,
    children?: ?React.Node,
    delayLongPress?: ?number,
    delayPressIn?: ?number,
    delayPressOut?: ?number,
    disabled?: ?boolean,
    focusable?: ?boolean,
    hitSlop?: ?EdgeInsetsProp,
    importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),
    nativeID?: ?string,
    onAccessibilityAction?: ?((event: AccessibilityActionEvent) => mixed),
    onBlur?: ?((event: BlurEvent) => mixed),
    onFocus?: ?((event: FocusEvent) => mixed),
    onLayout?: ?((event: LayoutEvent) => mixed),
    onLongPress?: ?((event: PressEvent) => mixed),
    onPress?: ?((event: PressEvent) => mixed),
    onPressIn?: ?((event: PressEvent) => mixed),
    onPressOut?: ?((event: PressEvent) => mixed),
    pressRetentionOffset?: ?EdgeInsetsProp,
    rejectResponderTermination?: ?boolean,
    testID?: ?string,
    touchSoundDisabled?: ?boolean,
  |},
>;

type State = $ReadOnly<
  {|
    pressability: Pressability,
  |},
>;

declare class TouchableWithoutFeedback
  extends $1<Props, State> {
  state: State,
  
  render(): React.Node,
  
  componentDidUpdate(): void,
  
  componentWillUnmount(): void,
}
declare var $1: typeof React.Component;

declare module.exports: typeof TouchableWithoutFeedback;
