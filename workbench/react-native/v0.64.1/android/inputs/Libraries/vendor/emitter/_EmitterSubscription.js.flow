// @flow
import type EventEmitter from "./EventEmitter";
import EventSubscription from "./_EventSubscription";
import type EventSubscriptionVendor from "./_EventSubscriptionVendor";

declare class EmitterSubscription
  extends $1 {
  // $FlowFixMe[value-as-type]
  emitter: EventEmitter,
  listener: Function,
  context: ?Object,
  
  /**
   * @param {EventEmitter} emitter - The event emitter that registered this
   *   subscription
   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls
   *   this subscription
   * @param {function} listener - Function to invoke when the specified event is
   *   emitted
   * @param {*} context - Optional context object to use when invoking the
   *   listener
   */
  constructor(
    // $FlowFixMe[value-as-type]
    emitter: EventEmitter,
    subscriber: EventSubscriptionVendor,
    listener: Function,
    context: ?Object
  ): void,
  
  /**
   * Removes this subscription from the emitter that registered it.
   * Note: we're overriding the `remove()` method of EventSubscription here
   * but deliberately not calling `super.remove()` as the responsibility
   * for removing the subscription lies with the EventEmitter.
   */
  remove(): void,
}
declare var $1: typeof EventSubscription;

declare module.exports: typeof EmitterSubscription;
