// @flow
type NodeId = string;

declare class Node {
  id: NodeId,
  children: Set<Node>,
  state: 'none' | 'visiting' | 'visited',
  
  constructor(id: NodeId): void,
}

declare class Graph {
  nodes: Map<NodeId, Node>,
  
  constructor(): void,
  
  addNode(nodeId: NodeId): Node,
  
  addEdge(srcId: NodeId, dstId: NodeId): void,
  
  // traverse returns all nodes in the graph reachable from the given rootIds.
  // the returned nodes are topologically sorted, with the deepest nodes
  // returned first.
  traverse(rootIds: Array<NodeId>): Array<NodeId>,
}
export {Graph};
