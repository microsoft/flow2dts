// @flow
type PlatformType = 'iOS' | 'android';

type CommandsFunctionTypeAnnotation = $ReadOnly<
  {|
    type: 'FunctionTypeAnnotation',
    params: $ReadOnlyArray<CommandsFunctionTypeParamAnnotation>,
  |},
>;

type CommandsFunctionTypeParamAnnotation = $ReadOnly<
  {|
    name: string,
    typeAnnotation: CommandsTypeAnnotation,
  |},
>;

type CommandsTypeAnnotation = 
  | ReservedFunctionValueTypeAnnotation
  | BooleanTypeAnnotation
  | Int32TypeAnnotation
  | DoubleTypeAnnotation
  | FloatTypeAnnotation
  | StringTypeAnnotation;

type ReservedFunctionValueTypeAnnotation = $ReadOnly<
  {|
    type: 'ReservedFunctionValueTypeAnnotation',
    name: ReservedFunctionValueTypeName,
  |},
>;

type DoubleTypeAnnotation = $ReadOnly<
  {|
    type: 'DoubleTypeAnnotation',
  |},
>;

type FloatTypeAnnotation = $ReadOnly<
  {|
    type: 'FloatTypeAnnotation',
  |},
>;

type BooleanTypeAnnotation = $ReadOnly<
  {|
    type: 'BooleanTypeAnnotation',
  |},
>;

type Int32TypeAnnotation = $ReadOnly<
  {|
    type: 'Int32TypeAnnotation',
  |},
>;

type StringTypeAnnotation = $ReadOnly<
  {|
    type: 'StringTypeAnnotation',
  |},
>;

type EventObjectPropertyType = 
  | $ReadOnly<
    {|
      type: 'BooleanTypeAnnotation',
      name: string,
      optional: boolean,
    |},
  >
  | $ReadOnly<
    {|
      type: 'StringTypeAnnotation',
      name: string,
      optional: boolean,
    |},
  >
  | $ReadOnly<
    {|
      type: 'DoubleTypeAnnotation',
      name: string,
      optional: boolean,
    |},
  >
  | $ReadOnly<
    {|
      type: 'FloatTypeAnnotation',
      name: string,
      optional: boolean,
    |},
  >
  | $ReadOnly<
    {|
      type: 'Int32TypeAnnotation',
      name: string,
      optional: boolean,
    |},
  >
  | $ReadOnly<
    {|
      type: 'StringEnumTypeAnnotation',
      name: string,
      optional: boolean,
      options: $ReadOnlyArray<
        {|
          name: string,
        |},
      >,
    |},
  >
  | $ReadOnly<
    {|
      type: 'ObjectTypeAnnotation',
      name: string,
      optional: boolean,
      properties: $ReadOnlyArray<EventObjectPropertyType>,
    |},
  >;

type PropTypeTypeAnnotation = 
  | $ReadOnly<
    {|
      type: 'BooleanTypeAnnotation',
      default: boolean | null,
    |},
  >
  | $ReadOnly<
    {|
      type: 'StringTypeAnnotation',
      default: string | null,
    |},
  >
  | $ReadOnly<
    {|
      type: 'DoubleTypeAnnotation',
      default: number,
    |},
  >
  | $ReadOnly<
    {|
      type: 'FloatTypeAnnotation',
      default: number | null,
    |},
  >
  | $ReadOnly<
    {|
      type: 'Int32TypeAnnotation',
      default: number,
    |},
  >
  | $ReadOnly<
    {|
      type: 'StringEnumTypeAnnotation',
      default: string,
      options: $ReadOnlyArray<
        {|
          name: string,
        |},
      >,
    |},
  >
  | $ReadOnly<
    {|
      type: 'Int32EnumTypeAnnotation',
      default: number,
      options: $ReadOnlyArray<
        {|
          value: number,
        |},
      >,
    |},
  >
  | $ReadOnly<
    {|
      type: 'ReservedPropTypeAnnotation',
      name: 
        | 'ColorPrimitive'
        | 'ImageSourcePrimitive'
        | 'PointPrimitive'
        | 'EdgeInsetsPrimitive',
    |},
  >
  | $ReadOnly<
    {|
      type: 'ObjectTypeAnnotation',
      properties: $ReadOnlyArray<PropTypeShape>,
    |},
  >
  | $ReadOnly<
    {|
      type: 'ArrayTypeAnnotation',
      elementType: 
        | $ReadOnly<
          {|
            type: 'BooleanTypeAnnotation',
          |},
        >
        | $ReadOnly<
          {|
            type: 'StringTypeAnnotation',
          |},
        >
        | $ReadOnly<
          {|
            type: 'DoubleTypeAnnotation',
          |},
        >
        | $ReadOnly<
          {|
            type: 'FloatTypeAnnotation',
          |},
        >
        | $ReadOnly<
          {|
            type: 'Int32TypeAnnotation',
          |},
        >
        | $ReadOnly<
          {|
            type: 'StringEnumTypeAnnotation',
            default: string,
            options: $ReadOnlyArray<
              {|
                name: string,
              |},
            >,
          |},
        >
        | $ReadOnly<
          {|
            type: 'ObjectTypeAnnotation',
            properties: $ReadOnlyArray<PropTypeShape>,
          |},
        >
        | $ReadOnly<
          {|
            type: 'ReservedPropTypeAnnotation',
            name: 
              | 'ColorPrimitive'
              | 'ImageSourcePrimitive'
              | 'PointPrimitive'
              | 'EdgeInsetsPrimitive',
          |},
        >
        | $ReadOnly<
          {|
            type: 'ArrayTypeAnnotation',
            elementType: $ReadOnly<
              {|
                type: 'ObjectTypeAnnotation',
                properties: $ReadOnlyArray<PropTypeShape>,
              |},
            >,
          |},
        >,
    |},
  >;

type PropTypeShape = $ReadOnly<
  {|
    name: string,
    optional: boolean,
    typeAnnotation: PropTypeTypeAnnotation,
  |},
>;

type EventTypeShape = $ReadOnly<
  {|
    name: string,
    bubblingType: 'direct' | 'bubble',
    optional: boolean,
    paperTopLevelNameDeprecated?: string,
    typeAnnotation: $ReadOnly<
      {|
        type: 'EventTypeAnnotation',
        argument?: $ReadOnly<
          {|
            type: 'ObjectTypeAnnotation',
            properties: $ReadOnlyArray<EventObjectPropertyType>,
          |},
        >,
      |},
    >,
  |},
>;

type CommandTypeShape = $ReadOnly<
  {|
    name: string,
    optional: boolean,
    typeAnnotation: CommandsFunctionTypeAnnotation,
  |},
>;

type OptionsShape = $ReadOnly<
  {|
    interfaceOnly?: boolean,
    
    // Use for components with no current paper rename in progress
    // Does not check for new name
    paperComponentName?: string,
    
    // Use for components that are not used on other platforms.
    excludedPlatforms?: $ReadOnlyArray<PlatformType>,
    
    // Use for components currently being renamed in paper
    // Will use new name if it is available and fallback to this name
    paperComponentNameDeprecated?: string,
  |},
>;

type ExtendsPropsShape = $ReadOnly<
  {|
    type: 'ReactNativeBuiltInType',
    knownTypeName: 'ReactNativeCoreViewProps',
  |},
>;

type ComponentShape = $ReadOnly<
  {|
    ...OptionsShape,
    extendsProps: $ReadOnlyArray<ExtendsPropsShape>,
    events: $ReadOnlyArray<EventTypeShape>,
    props: $ReadOnlyArray<PropTypeShape>,
    commands: $ReadOnlyArray<CommandTypeShape>,
  |},
>;

type SchemaType = $ReadOnly<
  {|
    modules: $ReadOnly<
      {|
        [hasteModuleName: string]: ComponentSchema | NativeModuleSchema,
      |},
    >,
  |},
>;

type ComponentSchema = $ReadOnly<
  {|
    type: 'Component',
    components: $ReadOnly<
      {|
        [componentName: string]: ComponentShape,
      |},
    >,
  |},
>;

type Nullable<+T: NativeModuleTypeAnnotation> = NullableTypeAnnotation<T> | T;

type NullableTypeAnnotation<+T: NativeModuleTypeAnnotation> = $ReadOnly<
  {|
    type: 'NullableTypeAnnotation',
    typeAnnotation: T,
  |},
>;

type NativeModuleSchema = $ReadOnly<
  {|
    type: 'NativeModule',
    aliases: NativeModuleAliasMap,
    spec: NativeModuleSpec,
    moduleNames: $ReadOnlyArray<string>,
    // Use for modules that are not used on other platforms.
    // TODO: It's clearer to define `restrictedToPlatforms` instead, but
    // `excludedPlatforms` is used here to be consistent with ComponentSchema.
    excludedPlatforms?: $ReadOnlyArray<PlatformType>,
  |},
>;

type NativeModuleSpec = $ReadOnly<
  {|
    properties: $ReadOnlyArray<NativeModulePropertySchema>,
  |},
>;

type NativeModulePropertySchema = $ReadOnly<
  {|
    name: string,
    optional: boolean,
    typeAnnotation: Nullable<NativeModuleFunctionTypeAnnotation>,
  |},
>;

type NativeModuleAliasMap = $ReadOnly<
  {|
    [aliasName: string]: NativeModuleObjectTypeAnnotation,
  |},
>;

type NativeModuleFunctionTypeAnnotation = $ReadOnly<
  {|
    type: 'FunctionTypeAnnotation',
    params: $ReadOnlyArray<NativeModuleMethodParamSchema>,
    returnTypeAnnotation: Nullable<NativeModuleReturnTypeAnnotation>,
  |},
>;

type NativeModuleMethodParamSchema = $ReadOnly<
  {|
    name: string,
    optional: boolean,
    typeAnnotation: Nullable<NativeModuleParamTypeAnnotation>,
  |},
>;

type NativeModuleObjectTypeAnnotation = $ReadOnly<
  {|
    type: 'ObjectTypeAnnotation',
    properties: $ReadOnlyArray<NativeModuleObjectTypeAnnotationPropertySchema>,
  |},
>;

type NativeModuleObjectTypeAnnotationPropertySchema = $ReadOnly<
  {|
    name: string,
    optional: boolean,
    typeAnnotation: Nullable<NativeModuleBaseTypeAnnotation>,
  |},
>;

type NativeModuleArrayTypeAnnotation<
  +T: Nullable<NativeModuleBaseTypeAnnotation>,
> = $ReadOnly<
  {|
    type: 'ArrayTypeAnnotation',
    /**
   * TODO(T72031674): Migrate all our NativeModule specs to not use
   * invalid Array ElementTypes. Then, make the elementType required.
   */
    elementType?: T,
  |},
>;

type NativeModuleStringTypeAnnotation = $ReadOnly<
  {|
    type: 'StringTypeAnnotation',
  |},
>;

type NativeModuleNumberTypeAnnotation = $ReadOnly<
  {|
    type: 'NumberTypeAnnotation',
  |},
>;

type NativeModuleInt32TypeAnnotation = $ReadOnly<
  {|
    type: 'Int32TypeAnnotation',
  |},
>;

type NativeModuleDoubleTypeAnnotation = $ReadOnly<
  {|
    type: 'DoubleTypeAnnotation',
  |},
>;

type NativeModuleFloatTypeAnnotation = $ReadOnly<
  {|
    type: 'FloatTypeAnnotation',
  |},
>;

type NativeModuleBooleanTypeAnnotation = $ReadOnly<
  {|
    type: 'BooleanTypeAnnotation',
  |},
>;

type NativeModuleGenericObjectTypeAnnotation = $ReadOnly<
  {|
    type: 'GenericObjectTypeAnnotation',
  |},
>;

type NativeModuleReservedFunctionValueTypeAnnotation = $ReadOnly<
  {|
    type: 'ReservedFunctionValueTypeAnnotation',
    name: ReservedFunctionValueTypeName,
  |},
>;

type NativeModuleTypeAliasTypeAnnotation = $ReadOnly<
  {|
    type: 'TypeAliasTypeAnnotation',
    name: string,
  |},
>;

type NativeModulePromiseTypeAnnotation = $ReadOnly<
  {|
    type: 'PromiseTypeAnnotation',
  |},
>;

type NativeModuleVoidTypeAnnotation = $ReadOnly<
  {|
    type: 'VoidTypeAnnotation',
  |},
>;

type NativeModuleBaseTypeAnnotation = 
  | NativeModuleStringTypeAnnotation
  | NativeModuleNumberTypeAnnotation
  | NativeModuleInt32TypeAnnotation
  | NativeModuleDoubleTypeAnnotation
  | NativeModuleFloatTypeAnnotation
  | NativeModuleBooleanTypeAnnotation
  | NativeModuleGenericObjectTypeAnnotation
  | NativeModuleReservedFunctionValueTypeAnnotation
  | NativeModuleTypeAliasTypeAnnotation
  | NativeModuleArrayTypeAnnotation<Nullable<NativeModuleBaseTypeAnnotation>>
  | NativeModuleObjectTypeAnnotation;

type NativeModuleParamTypeAnnotation = 
  | NativeModuleBaseTypeAnnotation
  | NativeModuleParamOnlyTypeAnnotation;

type NativeModuleReturnTypeAnnotation = 
  | NativeModuleBaseTypeAnnotation
  | NativeModuleReturnOnlyTypeAnnotation;

type NativeModuleTypeAnnotation = 
  | NativeModuleBaseTypeAnnotation
  | NativeModuleParamOnlyTypeAnnotation
  | NativeModuleReturnOnlyTypeAnnotation;

type NativeModuleParamOnlyTypeAnnotation = NativeModuleFunctionTypeAnnotation;
type NativeModuleReturnOnlyTypeAnnotation = 
  | NativeModulePromiseTypeAnnotation
  | NativeModuleVoidTypeAnnotation;

type ReservedFunctionValueTypeName = 'RootTag';
export type {PlatformType};

export type {CommandsFunctionTypeAnnotation};

export type {CommandsFunctionTypeParamAnnotation};

export type {CommandsTypeAnnotation};

export type {DoubleTypeAnnotation};

export type {FloatTypeAnnotation};

export type {BooleanTypeAnnotation};

export type {Int32TypeAnnotation};

export type {StringTypeAnnotation};

export type {EventObjectPropertyType};

export type {PropTypeShape};

export type {EventTypeShape};

export type {CommandTypeShape};

export type {OptionsShape};

export type {ExtendsPropsShape};

export type {ComponentShape};

export type {SchemaType};

export type {ComponentSchema};

export type {Nullable};

export type {NullableTypeAnnotation};

export type {NativeModuleSchema};

export type {NativeModulePropertySchema};

export type {NativeModuleAliasMap};

export type {NativeModuleFunctionTypeAnnotation};

export type {NativeModuleMethodParamSchema};

export type {NativeModuleObjectTypeAnnotation};

export type {NativeModuleObjectTypeAnnotationPropertySchema};

export type {NativeModuleArrayTypeAnnotation};

export type {NativeModuleStringTypeAnnotation};

export type {NativeModuleNumberTypeAnnotation};

export type {NativeModuleInt32TypeAnnotation};

export type {NativeModuleDoubleTypeAnnotation};

export type {NativeModuleFloatTypeAnnotation};

export type {NativeModuleBooleanTypeAnnotation};

export type {NativeModuleGenericObjectTypeAnnotation};

export type {NativeModuleReservedFunctionValueTypeAnnotation};

export type {NativeModuleTypeAliasTypeAnnotation};

export type {NativeModulePromiseTypeAnnotation};

export type {NativeModuleVoidTypeAnnotation};

export type {NativeModuleBaseTypeAnnotation};

export type {NativeModuleParamTypeAnnotation};

export type {NativeModuleReturnTypeAnnotation};

export type {NativeModuleTypeAnnotation};

export type {ReservedFunctionValueTypeName};
