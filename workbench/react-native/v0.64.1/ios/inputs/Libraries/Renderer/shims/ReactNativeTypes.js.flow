// @flow
import type {ElementRef} from "react";
import type {AbstractComponent} from "react";

type MeasureOnSuccessCallback = (
  x: number,
  y: number,
  width: number,
  height: number,
  pageX: number,
  pageY: number
) => void;

type MeasureInWindowOnSuccessCallback = (
  x: number,
  y: number,
  width: number,
  height: number
) => void;

type MeasureLayoutOnSuccessCallback = (
  left: number,
  top: number,
  width: number,
  height: number
) => void;

type AttributeType = 
  | true
  | $ReadOnly<
    {|
      diff?: <T>(arg1: T, arg2: T) => boolean,
      process?: (arg1: any) => any,
    |},
  >;

type AttributeConfiguration<TProps = string, TStyleProps = string> = $ReadOnly<
  {
    [propName: TProps]: AttributeType,
    style: $ReadOnly<{[propName: TStyleProps]: AttributeType,...}>,
    ...,
  },
>;

type ReactNativeBaseComponentViewConfig<TProps = string, TStyleProps = string> = $ReadOnly<
  {|
    baseModuleName?: string,
    bubblingEventTypes?: $ReadOnly<
      {
        [eventName: string]: $ReadOnly<
          {|
            phasedRegistrationNames: $ReadOnly<
              {|
                captured: string,
                bubbled: string,
              |},
            >,
          |},
        >,
        ...,
      },
    >,
    Commands?: $ReadOnly<{[commandName: string]: number,...}>,
    directEventTypes?: $ReadOnly<
      {
        [eventName: string]: $ReadOnly<
          {|
            registrationName: string,
          |},
        >,
        ...,
      },
    >,
    NativeProps?: $ReadOnly<{[propName: string]: string,...}>,
    uiViewClassName: string,
    validAttributes: AttributeConfiguration<TProps, TStyleProps>,
  |},
>;

type ViewConfigGetter = () => ReactNativeBaseComponentViewConfig<>;

type NativeMethods = {
  blur(): void,
  focus(): void,
  measure(callback: MeasureOnSuccessCallback): void,
  measureInWindow(callback: MeasureInWindowOnSuccessCallback): void,
  measureLayout(
    relativeToNativeNode: number | ElementRef<HostComponent<mixed>>,
    onSuccess: MeasureLayoutOnSuccessCallback,
    onFail?: () => void
  ): void,
  setNativeProps(nativeProps: Object): void,
  ...,
};

type HostComponent<T> = AbstractComponent<T, $ReadOnly<NativeMethods>>;

type SecretInternalsType = {
  computeComponentStackForErrorReporting(tag: number): string,
  // TODO (bvaughn) Decide which additional types to expose here?
  // And how much information to fill in for the above types.
  
  ...,
};

type InspectorDataProps = $ReadOnly<
  {
    [propName: string]: string,
    ...,
  },
>;

type InspectorDataSource = $ReadOnly<
  {|
    fileName?: string,
    lineNumber?: number,
  |},
>;

type InspectorDataGetter = (
  (componentOrHandle: any) => ?number
) => $ReadOnly<
  {|
    measure: Function,
    props: InspectorDataProps,
    source: InspectorDataSource,
  |},
>;

type InspectorData = $ReadOnly<
  {|
    hierarchy: Array<
      {|
        name: ?string,
        getInspectorData: InspectorDataGetter,
      |},
    >,
    selectedIndex: ?number,
    props: InspectorDataProps,
    source: ?InspectorDataSource,
  |},
>;

type TouchedViewDataAtPoint = $ReadOnly<
  {|
    pointerY: number,
    touchedViewTag?: number,
    frame: $ReadOnly<
      {|
        top: number,
        left: number,
        width: number,
        height: number,
      |},
    >,
    ...InspectorData,
  |},
>;

type ReactNativeType = {
  findHostInstance_DEPRECATED(
    componentOrHandle: any
  ): ?ElementRef<HostComponent<mixed>>,
  findNodeHandle(componentOrHandle: any): ?number,
  dispatchCommand(handle: any, command: string, args: Array<any>): void,
  render(
    element: React$Element<any>,
    containerTag: any,
    callback: ?Function
  ): any,
  unmountComponentAtNode(containerTag: number): any,
  unmountComponentAtNodeAndRemoveContainer(containerTag: number): any,
  // TODO (bvaughn) Add types
  unstable_batchedUpdates: any,
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: SecretInternalsType,
  ...,
};

type ReactFabricType = {
  findHostInstance_DEPRECATED(
    componentOrHandle: any
  ): ?ElementRef<HostComponent<mixed>>,
  findNodeHandle(componentOrHandle: any): ?number,
  dispatchCommand(handle: any, command: string, args: Array<any>): void,
  render(
    element: React$Element<any>,
    containerTag: any,
    callback: ?Function
  ): any,
  unmountComponentAtNode(containerTag: number): any,
  ...,
};

type ReactNativeEventTarget = {
  node: Object,
  canonical: {
    _nativeTag: number,
    viewConfig: ReactNativeBaseComponentViewConfig<>,
    currentProps: Object,
    _internalInstanceHandle: Object,
    ...,
  },
  ...,
};

type ReactFaricEventTouch = {
  identifier: number,
  locationX: number,
  locationY: number,
  pageX: number,
  pageY: number,
  screenX: number,
  screenY: number,
  target: number,
  timestamp: number,
  force: number,
  ...,
};

type ReactFaricEvent = {
  touches: Array<ReactFaricEventTouch>,
  changedTouches: Array<ReactFaricEventTouch>,
  targetTouches: Array<ReactFaricEventTouch>,
  target: number,
  ...,
};

type LayoutAnimationType = 
  | 'spring'
  | 'linear'
  | 'easeInEaseOut'
  | 'easeIn'
  | 'easeOut'
  | 'keyboard';

type LayoutAnimationProperty = 'opacity' | 'scaleX' | 'scaleY' | 'scaleXY';

type LayoutAnimationAnimationConfig = $ReadOnly<
  {|
    duration?: number,
    delay?: number,
    springDamping?: number,
    initialVelocity?: number,
    type?: LayoutAnimationType,
    property?: LayoutAnimationProperty,
  |},
>;

type LayoutAnimationConfig = $ReadOnly<
  {|
    duration: number,
    create?: LayoutAnimationAnimationConfig,
    update?: LayoutAnimationAnimationConfig,
    delete?: LayoutAnimationAnimationConfig,
  |},
>;
export type {MeasureOnSuccessCallback};

export type {MeasureInWindowOnSuccessCallback};

export type {MeasureLayoutOnSuccessCallback};

export type {AttributeConfiguration};

export type {ReactNativeBaseComponentViewConfig};

export type {ViewConfigGetter};

export type {NativeMethods};

export type {HostComponent};

export type {InspectorData};

export type {TouchedViewDataAtPoint};

export type {ReactNativeType};

export type {ReactFabricType};

export type {ReactNativeEventTarget};

export type {ReactFaricEventTouch};

export type {ReactFaricEvent};

export type {LayoutAnimationType};

export type {LayoutAnimationProperty};

export type {LayoutAnimationAnimationConfig};

export type {LayoutAnimationConfig};
