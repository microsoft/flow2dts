// @flow
import * as React from "react";

import type {ViewProps} from "./ViewPropTypes";
import type {HostComponent} from "../../Renderer/shims/ReactNativeTypes";

type ViewNativeComponentType = HostComponent<ViewProps>;

declare var viewConfig: 
  | {...}
  | {|
    bubblingEventTypes?: $ReadOnly<
      {
        [eventName: string]: $ReadOnly<
          {|
            phasedRegistrationNames: $ReadOnly<
              {|
                bubbled: string,
                captured: string,
              |},
            >,
          |},
        >,
        ...,
      },
    >,
    directEventTypes?: $ReadOnly<
      {
        [eventName: string]: $ReadOnly<{|registrationName: string|}>,
        ...,
      },
    >,
    uiViewClassName: string,
    validAttributes?: {
      [propName: string]: 
        | true
        | $ReadOnly<
          {|
            diff?: <T>(arg1: any, arg2: any) => boolean,
            process?: (arg1: any) => any,
          |},
        >,
      ...,
    },
  |};

declare var __INTERNAL_VIEW_CONFIG: typeof viewConfig;

interface NativeCommands {
  +hotspotUpdate: (
    viewRef: React.ElementRef<HostComponent<mixed>>,
    x: number,
    y: number
  ) => void,
  +setPressed: (
    viewRef: React.ElementRef<HostComponent<mixed>>,
    pressed: boolean
  ) => void,
}

declare var Commands: NativeCommands;
export type {ViewNativeComponentType};

export {__INTERNAL_VIEW_CONFIG};

export {Commands};

declare export default ViewNativeComponentType;
