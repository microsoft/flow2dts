// @flow
import SliderNativeComponent from "./SliderNativeComponent";
declare var React: typeof $1;
const $1 = require("react");

import type {ImageSource} from "../../Image/ImageSource";
import type {ViewStyleProp} from "../../StyleSheet/StyleSheet";
import type {ColorValue} from "../../StyleSheet/StyleSheet";
import type {ViewProps} from "../View/ViewPropTypes";

type IOSProps = $ReadOnly<
  {|
    /**
   * Assigns a single image for the track. Only static images are supported.
   * The center pixel of the image will be stretched to fill the track.
   */
    trackImage?: ?ImageSource,
    
    /**
   * Assigns a minimum track image. Only static images are supported. The
   * rightmost pixel of the image will be stretched to fill the track.
   */
    minimumTrackImage?: ?ImageSource,
    
    /**
   * Assigns a maximum track image. Only static images are supported. The
   * leftmost pixel of the image will be stretched to fill the track.
   */
    maximumTrackImage?: ?ImageSource,
    
    /**
   * Sets an image for the thumb. Only static images are supported.
   */
    thumbImage?: ?ImageSource,
  |},
>;

type Props = $ReadOnly<
  {|
    ...ViewProps,
    ...IOSProps,
    
    /**
   * Used to style and layout the `Slider`.  See `StyleSheet.js` and
   * `DeprecatedViewStylePropTypes.js` for more info.
   */
    style?: ?ViewStyleProp,
    
    /**
   * Initial value of the slider. The value should be between minimumValue
   * and maximumValue, which default to 0 and 1 respectively.
   * Default value is 0.
   *
   * *This is not a controlled component*, you don't need to update the
   * value during dragging.
   */
    value?: ?number,
    
    /**
   * Step value of the slider. The value should be
   * between 0 and (maximumValue - minimumValue).
   * Default value is 0.
   */
    step?: ?number,
    
    /**
   * Initial minimum value of the slider. Default value is 0.
   */
    minimumValue?: ?number,
    
    /**
   * Initial maximum value of the slider. Default value is 1.
   */
    maximumValue?: ?number,
    
    /**
   * The color used for the track to the left of the button.
   * Overrides the default blue gradient image on iOS.
   */
    minimumTrackTintColor?: ?ColorValue,
    
    /**
   * The color used for the track to the right of the button.
   * Overrides the default blue gradient image on iOS.
   */
    maximumTrackTintColor?: ?ColorValue,
    /**
   * The color used to tint the default thumb images on iOS, or the
   * color of the foreground switch grip on Android.
   */
    thumbTintColor?: ?ColorValue,
    
    /**
   * If true the user won't be able to move the slider.
   * Default value is false.
   */
    disabled?: ?boolean,
    
    /**
   * Callback continuously called while the user is dragging the slider.
   */
    onValueChange?: ?((value: number) => void),
    
    /**
   * Callback that is called when the user releases the slider,
   * regardless if the value has changed. The current value is passed
   * as an argument to the callback handler.
   */
    onSlidingComplete?: ?((value: number) => void),
    
    /**
   * Used to locate this view in UI automation tests.
   */
    testID?: ?string,
  |},
>;

declare var SliderWithRef: React.AbstractComponent<
  Props,
  React.ElementRef<typeof SliderNativeComponent>,
>;

declare module.exports: typeof SliderWithRef;
