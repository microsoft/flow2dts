// @flow
import type {Category} from "./parseLogBoxLog";
import type {Message} from "./parseLogBoxLog";
import type {ComponentStack} from "./parseLogBoxLog";
import type {CodeFrame} from "./parseLogBoxLog";
import type {Stack} from "./LogBoxSymbolication";

type SymbolicationStatus = 'NONE' | 'PENDING' | 'COMPLETE' | 'FAILED';

type LogLevel = 'warn' | 'error' | 'fatal' | 'syntax';

type LogBoxLogData = $ReadOnly<
  {|
    level: LogLevel,
    type?: ?string,
    message: Message,
    stack: Stack,
    category: string,
    componentStack: ComponentStack,
    codeFrame?: ?CodeFrame,
    isComponentError: boolean,
  |},
>;

declare class LogBoxLog {
  message: Message,
  type: ?string,
  category: Category,
  componentStack: ComponentStack,
  stack: Stack,
  count: number,
  level: LogLevel,
  codeFrame: ?CodeFrame,
  isComponentError: boolean,
  symbolicated: 
    | $ReadOnly<{|error: null, stack: null, status: 'NONE'|}>
    | $ReadOnly<{|error: null, stack: null, status: 'PENDING'|}>
    | $ReadOnly<{|error: null, stack: Stack, status: 'COMPLETE'|}>
    | $ReadOnly<{|error: Error, stack: null, status: 'FAILED'|}>,
  
  constructor(data: LogBoxLogData): void,
  
  incrementCount(): void,
  
  getAvailableStack(): Stack,
  
  retrySymbolicate(callback?: (status: SymbolicationStatus) => void): void,
  
  symbolicate(callback?: (status: SymbolicationStatus) => void): void,
  
  handleSymbolicate(callback?: (status: SymbolicationStatus) => void): void,
  
  updateStatus(
    error: ?Error,
    stack: ?Stack,
    codeFrame: ?CodeFrame,
    callback?: (status: SymbolicationStatus) => void
  ): void,
}
export type {LogLevel};

export type {LogBoxLogData};

declare export default typeof LogBoxLog;
