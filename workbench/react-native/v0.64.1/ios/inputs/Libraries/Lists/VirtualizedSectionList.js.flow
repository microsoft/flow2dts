// @flow
declare var React: typeof $1;
const $1 = require("react");

declare var VirtualizedList: typeof $2;
const $2 = require("./VirtualizedList");

type Item = any;

type SectionBase<SectionItemT> = {
  /**
   * The data for rendering items in this section.
   */
  data: $ReadOnlyArray<SectionItemT>,
  /**
   * Optional key to keep track of section re-ordering. If you don't plan on re-ordering sections,
   * the array index will be used by default.
   */
  key?: string,
  // Optional props will override list-wide props just for this section.
  renderItem?: ?((
    info: {
      item: SectionItemT,
      index: number,
      section: SectionBase<SectionItemT>,
      separators: {
        highlight: () => void,
        unhighlight: () => void,
        updateProps: (select: 'leading' | 'trailing', newProps: Object) => void,
        ...,
      },
      ...,
    }
  ) => null | React.Element<any>),
  ItemSeparatorComponent?: ?React.ComponentType<any>,
  keyExtractor?: (item: SectionItemT, index?: ?number) => string,
  ...,
};

type RequiredProps<SectionT: SectionBase<any>> = {|
  sections: $ReadOnlyArray<SectionT>,
|};

type OptionalProps<SectionT: SectionBase<any>> = {|
  /**
   * Default renderer for every item in every section.
   */
  renderItem?: (
    info: {
      item: Item,
      index: number,
      section: SectionT,
      separators: {
        highlight: () => void,
        unhighlight: () => void,
        updateProps: (select: 'leading' | 'trailing', newProps: Object) => void,
        ...,
      },
      ...,
    }
  ) => null | React.Element<any>,
  /**
   * Rendered at the top of each section. These stick to the top of the `ScrollView` by default on
   * iOS. See `stickySectionHeadersEnabled`.
   */
  renderSectionHeader?: ?((
    info: {
      section: SectionT,
      ...,
    }
  ) => null | React.Element<any>),
  /**
   * Rendered at the bottom of each section.
   */
  renderSectionFooter?: ?((
    info: {
      section: SectionT,
      ...,
    }
  ) => null | React.Element<any>),
  /**
   * Rendered at the top and bottom of each section (note this is different from
   * `ItemSeparatorComponent` which is only rendered between items). These are intended to separate
   * sections from the headers above and below and typically have the same highlight response as
   * `ItemSeparatorComponent`. Also receives `highlighted`, `[leading/trailing][Item/Separator]`,
   * and any custom props from `separators.updateProps`.
   */
  SectionSeparatorComponent?: ?React.ComponentType<any>,
  /**
   * Makes section headers stick to the top of the screen until the next one pushes it off. Only
   * enabled by default on iOS because that is the platform standard there.
   */
  stickySectionHeadersEnabled?: boolean,
  onEndReached?: ?(({distanceFromEnd: number,...}) => void),
|};

type VirtualizedListProps = React.ElementProps<typeof VirtualizedList>;

type Props<SectionT> = {|
  ...RequiredProps<SectionT>,
  ...OptionalProps<SectionT>,
  ...$Diff<
    VirtualizedListProps,
    {renderItem: $PropertyType<VirtualizedListProps, 'renderItem'>,...},
  >,
|};
type ScrollToLocationParamsType = {|
  animated?: ?boolean,
  itemIndex: number,
  sectionIndex: number,
  viewOffset?: number,
  viewPosition?: number,
|};

type DefaultProps = {|
  ...typeof VirtualizedList.defaultProps,
  data: $ReadOnlyArray<Item>,
|};

type State = {childProps: VirtualizedListProps,...};

declare class VirtualizedSectionList<SectionT: SectionBase<any>>
  extends $3<Props<SectionT>, State> {
  static defaultProps: DefaultProps,
  
  scrollToLocation(params: ScrollToLocationParamsType): void,
  
  getListRef(): VirtualizedList,
  
  constructor(props: Props<SectionT>, context: Object): void,
  
  UNSAFE_componentWillReceiveProps(nextProps: Props<SectionT>): void,
  
  render(): React.Node,
}
declare var $3: typeof React.PureComponent;
export type {SectionBase};

export type {Props};
export type {ScrollToLocationParamsType};

declare module.exports: typeof VirtualizedSectionList;
