// @flow
import NativeEventEmitter from "../EventEmitter/NativeEventEmitter";

import type {EventConfig} from "./AnimatedEvent";
import type {EventMapping} from "./NativeAnimatedModule";
import type {AnimatedNodeConfig} from "./NativeAnimatedModule";
import type {AnimatingNodeConfig} from "./NativeAnimatedModule";
import type {AnimationConfig} from "./animations/Animation";
import type {EndCallback} from "./animations/Animation";
import type {InterpolationConfigType} from "./nodes/AnimatedInterpolation";

declare var API: {|
  getValue: (tag: number, saveValueCallback: (value: number) => void) => void,
  setWaitingForIdentifier: (id: string) => void,
  unsetWaitingForIdentifier: (id: string) => void,
  disableQueue: () => void,
  queueOperation: (fn: () => void) => void,
  createAnimatedNode: (tag: number, config: AnimatedNodeConfig) => void,
  startListeningToAnimatedNodeValue: (tag: number) => void,
  stopListeningToAnimatedNodeValue: (tag: number) => void,
  connectAnimatedNodes: (parentTag: number, childTag: number) => void,
  disconnectAnimatedNodes: (parentTag: number, childTag: number) => void,
  startAnimatingNode: (
    animationId: number,
    nodeTag: number,
    config: AnimatingNodeConfig,
    endCallback: EndCallback
  ) => void,
  stopAnimation: (animationId: number) => void,
  setAnimatedNodeValue: (nodeTag: number, value: number) => void,
  setAnimatedNodeOffset: (nodeTag: number, offset: number) => void,
  flattenAnimatedNodeOffset: (nodeTag: number) => void,
  extractAnimatedNodeOffset: (nodeTag: number) => void,
  connectAnimatedNodeToView: (nodeTag: number, viewTag: number) => void,
  disconnectAnimatedNodeFromView: (nodeTag: number, viewTag: number) => void,
  restoreDefaultValues: (nodeTag: number) => void,
  dropAnimatedNode: (tag: number) => void,
  addAnimatedEventToView: (
    viewTag: number,
    eventName: string,
    eventMapping: EventMapping
  ) => void,
  removeAnimatedEventFromView(
    viewTag: number,
    eventName: string,
    animatedNodeTag: number
  ): void,
|};

declare function addWhitelistedStyleProp(prop: string): void;

declare function addWhitelistedTransformProp(prop: string): void;

declare function addWhitelistedInterpolationParam(param: string): void;

declare function validateTransform(
  configs: Array<
    
      | {
        type: 'animated',
        property: string,
        nodeTag: ?number,
        ...,
      }
      | {
        type: 'static',
        property: string,
        value: number | string,
        ...,
      },
  >
): void;

declare function validateStyles(styles: {[key: string]: ?number,...}): void;

declare function validateInterpolation(config: InterpolationConfigType): void;

declare function generateNewNodeTag(): number;

declare function generateNewAnimationId(): number;

declare function assertNativeAnimatedModule(): void;

declare function shouldUseNativeDriver(
  config: {...AnimationConfig,...} | EventConfig
): boolean;

declare function transformDataType(value: number | string): number | string;

declare module.exports: {|
  API: typeof API,
  addWhitelistedStyleProp: typeof addWhitelistedStyleProp,
  addWhitelistedTransformProp: typeof addWhitelistedTransformProp,
  addWhitelistedInterpolationParam: typeof addWhitelistedInterpolationParam,
  validateStyles: typeof validateStyles,
  validateTransform: typeof validateTransform,
  validateInterpolation: typeof validateInterpolation,
  generateNewNodeTag: typeof generateNewNodeTag,
  generateNewAnimationId: typeof generateNewAnimationId,
  assertNativeAnimatedModule: typeof assertNativeAnimatedModule,
  shouldUseNativeDriver: typeof shouldUseNativeDriver,
  transformDataType: typeof transformDataType,
  
  get nativeEventEmitter(): NativeEventEmitter,
|};
