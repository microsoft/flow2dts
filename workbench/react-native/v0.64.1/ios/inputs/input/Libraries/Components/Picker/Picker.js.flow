// @flow
declare var React: typeof $3;
const $3 = require("react");

import type {TextStyleProp} from "../../StyleSheet/StyleSheet";
import type {ColorValue} from "../../StyleSheet/StyleSheet";

type PickerItemProps = $ReadOnly<
  {|
    /**
   * Text to display for this item.
   */
    label: string,
    
    /**
   * The value to be passed to picker's `onValueChange` callback when
   * this item is selected.
   */
    value?: ?string,
    
    /**
   * Color of this item's text.
   * @platform android
   */
    color?: ColorValue,
    
    /**
   * Used to locate the item in end-to-end tests.
   */
    testID?: string,
  |},
>;

declare class PickerItem
  extends $2<PickerItemProps> {
  render(): void,
}
declare var $2: typeof React.Component;

type PickerProps = $ReadOnly<
  {|
    children?: React.Node,
    style?: ?TextStyleProp,
    
    /**
   * Value matching value of one of the items.
   */
    selectedValue?: ?string,
    
    /**
   * Callback for when an item is selected. This is called with the following parameters:
   *   - `itemValue`: the `value` prop of the item that was selected
   *   - `itemIndex`: the index of the selected item in this picker
   */
    onValueChange?: ?((itemValue: string | number, itemIndex: number) => mixed),
    
    /**
   * If set to false, the picker will be disabled, i.e. the user will not be able to make a
   * selection.
   * @platform android
   */
    enabled?: ?boolean,
    
    /**
   * On Android, specifies how to display the selection items when the user taps on the picker:
   *
   *   - 'dialog': Show a modal dialog. This is the default.
   *   - 'dropdown': Shows a dropdown anchored to the picker view
   *
   * @platform android
   */
    mode?: ?('dialog' | 'dropdown'),
    
    /**
   * Style to apply to each of the item labels.
   * @platform ios
   */
    itemStyle?: ?TextStyleProp,
    
    /**
   * Color of the item background.
   * @platform android
   */
    backgroundColor?: ColorValue,
    
    /**
   * Prompt string for this picker, used on Android in dialog mode as the title of the dialog.
   * @platform android
   */
    prompt?: ?string,
    
    /**
   * Used to locate this view in end-to-end tests.
   */
    testID?: ?string,
    /**
   * The string used for the accessibility label. Will be read once focused on the picker but not on change.
   */
    accessibilityLabel?: ?string,
  |},
>;

declare class Picker
  extends $1<PickerProps> {
  static MODE_DIALOG: string,
  
  static MODE_DROPDOWN: string,
  
  static Item: typeof PickerItem,
  
  static defaultProps: {|mode: string|},
  
  render(): React.Node,
}
declare var $1: typeof React.Component;
export type {PickerItem};

declare module.exports: typeof Picker;
