// @flow
declare var React: typeof $1;
const $1 = require("react");

declare var ReactTestRenderer: typeof $2;
const $2 = require("react-test-renderer");

import type {ReactTestRenderer as ReactTestRendererType} from "react-test-renderer";

type ReactTestInstance = $PropertyType<ReactTestRendererType, 'root'>;

type Predicate = (node: ReactTestInstance) => boolean;

type $ReturnType<Fn> = $Call<<Ret, A>((...A) => Ret) => Ret, Fn>;

type ReactTestRendererJSON = $ReturnType<ReactTestRenderer.create.toJSON>;

declare function byClickable(): Predicate;

declare function byTestID(testID: string): Predicate;

declare function byTextMatching(regex: RegExp): Predicate;

declare function enter(instance: ReactTestInstance, text: string): void;

declare function maximumDepthError(
  // $FlowFixMe[value-as-type]
  tree: ReactTestRendererType,
  maxDepthLimit: number
): ?string;

declare function expectNoConsoleWarn(): void;

declare function expectNoConsoleError(): void;

declare function expectRendersMatchingSnapshot(
  name: string,
  ComponentProvider: () => React.Element<any>,
  unmockComponent: () => mixed
): void;

declare function maximumDepthOfJSON(node: ?ReactTestRendererJSON): number;

declare function renderAndEnforceStrictMode(element: React.Node): any;

declare function renderWithStrictMode(
  element: React.Node
): ReactTestRendererType;

declare function tap(instance: ReactTestInstance): void;

declare function scrollToBottom(instance: ReactTestInstance): void;

declare function withMessage(fn: Predicate, message: string): Predicate;
export type {ReactTestInstance};

export type {Predicate};

export type {ReactTestRendererJSON};

export {byClickable};
export {byTestID};
export {byTextMatching};
export {enter};
export {expectNoConsoleWarn};
export {expectNoConsoleError};
export {expectRendersMatchingSnapshot};
export {maximumDepthError};
export {maximumDepthOfJSON};
export {renderAndEnforceStrictMode};
export {renderWithStrictMode};
export {scrollToBottom};
export {tap};
export {withMessage};
