// @flow
type SpyData = {
  type: number,
  module: ?string,
  method: string | number,
  args: Array<mixed>,
  ...,
};

declare class MessageQueue {
  __spy: ?((data: SpyData) => void),
  
  constructor(): void,
  
  static spy(spyOrToggle: boolean | ((data: SpyData) => void)): void,
  
  callFunctionReturnFlushedQueue(
    module: string,
    method: string,
    args: Array<mixed>
  ): null | [Array<number>, Array<number>, Array<mixed>, number],
  
  invokeCallbackAndReturnFlushedQueue(
    cbID: number,
    args: Array<mixed>
  ): null | [Array<number>, Array<number>, Array<mixed>, number],
  
  flushedQueue(): null | [Array<number>, Array<number>, Array<mixed>, number],
  
  getEventLoopRunningTime(): number,
  
  registerCallableModule(name: string, module: {...}): void,
  
  registerLazyCallableModule(name: string, factory: (void) => {...}): void,
  
  getCallableModule(name: string): {...} | null,
  
  callNativeSyncHook(
    moduleID: number,
    methodID: number,
    params: Array<mixed>,
    onFail: ?((...Array<mixed>) => void),
    onSucc: ?((...Array<mixed>) => void)
  ): mixed,
  
  processCallbacks(
    moduleID: number,
    methodID: number,
    params: Array<mixed>,
    onFail: ?((...Array<mixed>) => void),
    onSucc: ?((...Array<mixed>) => void)
  ): void,
  
  enqueueNativeCall(
    moduleID: number,
    methodID: number,
    params: Array<mixed>,
    onFail: ?((...Array<mixed>) => void),
    onSucc: ?((...Array<mixed>) => void)
  ): void,
  
  createDebugLookup(
    moduleID: number,
    name: string,
    methods: ?$ReadOnlyArray<string>
  ): void,
  
  // For JSTimers to register its callback. Otherwise a circular dependency
  // between modules is introduced. Note that only one callback may be
  // registered at a time.
  setImmediatesCallback(fn: () => void): void,
  
  /**
   * Private methods
   */
  
  __guard(fn: () => void): void,
  
  // MessageQueue installs a global handler to catch all exceptions where JS users can register their own behavior
  // This handler makes all exceptions to be propagated from inside MessageQueue rather than by the VM at their origin
  // This makes stacktraces to be placed at MessageQueue rather than at where they were launched
  // The parameter DebuggerInternal.shouldPauseOnThrow is used to check before catching all exceptions and
  // can be configured by the VM or any Inspector
  __shouldPauseOnThrow(): boolean,
  
  __callImmediates(): void,
  
  __callFunction(module: string, method: string, args: Array<mixed>): void,
  
  __invokeCallback(cbID: number, args: Array<mixed>): void,
}
export type {SpyData};

declare module.exports: typeof MessageQueue;
