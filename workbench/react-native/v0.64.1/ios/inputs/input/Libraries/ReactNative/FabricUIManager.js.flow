// @flow
import type {MeasureOnSuccessCallback} from "../Renderer/shims/ReactNativeTypes";
import type {MeasureInWindowOnSuccessCallback} from "../Renderer/shims/ReactNativeTypes";
import type {MeasureLayoutOnSuccessCallback} from "../Renderer/shims/ReactNativeTypes";
import type {LayoutAnimationConfig} from "../Renderer/shims/ReactNativeTypes";

type Node = {...};
type NodeSet = Array<Node>;
type NodeProps = {...};
type InstanceHandle = {...};
type Spec = {|
  +createNode: (
    reactTag: number,
    viewName: string,
    rootTag: number,
    props: NodeProps,
    instanceHandle: InstanceHandle
  ) => Node,
  +cloneNode: (node: Node) => Node,
  +cloneNodeWithNewChildren: (node: Node) => Node,
  +cloneNodeWithNewProps: (node: Node, newProps: NodeProps) => Node,
  +cloneNodeWithNewChildrenAndProps: (node: Node, newProps: NodeProps) => Node,
  +createChildSet: (rootTag: number) => NodeSet,
  +appendChild: (parentNode: Node, child: Node) => Node,
  +appendChildToSet: (childSet: NodeSet, child: Node) => void,
  +completeRoot: (rootTag: number, childSet: NodeSet) => void,
  +setNativeProps: (node: Node, nativeProps: NodeProps) => void,
  +measure: (node: Node, callback: MeasureOnSuccessCallback) => void,
  +measureInWindow: (
    node: Node,
    callback: MeasureInWindowOnSuccessCallback
  ) => void,
  +measureLayout: (
    node: Node,
    relativeNode: Node,
    onFail: () => void,
    onSuccess: MeasureLayoutOnSuccessCallback
  ) => void,
  +configureNextLayoutAnimation: (
    config: LayoutAnimationConfig,
    callback: () => void // check what is returned here
    ,
    // This error isn't currently called anywhere, so the `error` object is really not defined
    // $FlowFixMe
    errorCallback: (error: Object) => void
  ) => void,
|};

declare var FabricUIManager: ?Spec;
export type {Spec};

declare module.exports: typeof FabricUIManager;
