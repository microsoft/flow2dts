// @flow
import * as React from "react";
import type {HostComponent} from "../Renderer/shims/ReactNativeTypes";

type SyntheticEvent<T> = $ReadOnly<
  {|
    bubbles: ?boolean,
    cancelable: ?boolean,
    currentTarget: number | React.ElementRef<HostComponent<mixed>>,
    defaultPrevented: ?boolean,
    dispatchConfig: $ReadOnly<
      {|
        registrationName: string,
      |},
    >,
    eventPhase: ?number,
    preventDefault: () => void,
    isDefaultPrevented: () => boolean,
    stopPropagation: () => void,
    isPropagationStopped: () => boolean,
    isTrusted: ?boolean,
    nativeEvent: T,
    persist: () => void,
    target: ?number | React.ElementRef<HostComponent<mixed>>,
    timeStamp: number,
    type: ?string,
  |},
>;

type ResponderSyntheticEvent<T> = $ReadOnly<
  {|
    ...SyntheticEvent<T>,
    touchHistory: $ReadOnly<
      {|
        indexOfSingleActiveTouch: number,
        mostRecentTimeStamp: number,
        numberActiveTouches: number,
        touchBank: $ReadOnlyArray<
          $ReadOnly<
            {|
              touchActive: boolean,
              startPageX: number,
              startPageY: number,
              startTimeStamp: number,
              currentPageX: number,
              currentPageY: number,
              currentTimeStamp: number,
              previousPageX: number,
              previousPageY: number,
              previousTimeStamp: number,
            |},
          >,
        >,
      |},
    >,
  |},
>;

type Layout = $ReadOnly<
  {|
    x: number,
    y: number,
    width: number,
    height: number,
  |},
>;

type TextLayout = $ReadOnly<
  {|
    ...Layout,
    ascender: number,
    capHeight: number,
    descender: number,
    text: string,
    xHeight: number,
  |},
>;

type LayoutEvent = SyntheticEvent<
  $ReadOnly<
    {|
      layout: Layout,
    |},
  >,
>;

type TextLayoutEvent = SyntheticEvent<
  $ReadOnly<
    {|
      lines: Array<TextLayout>,
    |},
  >,
>;

type PressEvent = ResponderSyntheticEvent<
  $ReadOnly<
    {|
      changedTouches: $ReadOnlyArray<$PropertyType<PressEvent, 'nativeEvent'>>,
      force?: number,
      identifier: number,
      locationX: number,
      locationY: number,
      pageX: number,
      pageY: number,
      target: ?number,
      timestamp: number,
      touches: $ReadOnlyArray<$PropertyType<PressEvent, 'nativeEvent'>>,
    |},
  >,
>;

type ScrollEvent = SyntheticEvent<
  $ReadOnly<
    {|
      contentInset: $ReadOnly<
        {|
          bottom: number,
          left: number,
          right: number,
          top: number,
        |},
      >,
      contentOffset: $ReadOnly<
        {|
          y: number,
          x: number,
        |},
      >,
      contentSize: $ReadOnly<
        {|
          height: number,
          width: number,
        |},
      >,
      layoutMeasurement: $ReadOnly<
        {|
          height: number,
          width: number,
        |},
      >,
      targetContentOffset?: $ReadOnly<
        {|
          y: number,
          x: number,
        |},
      >,
      velocity?: $ReadOnly<
        {|
          y: number,
          x: number,
        |},
      >,
      zoomScale?: number,
      responderIgnoreScroll?: boolean,
    |},
  >,
>;

type BlurEvent = SyntheticEvent<
  $ReadOnly<
    {|
      target: number,
    |},
  >,
>;

type FocusEvent = SyntheticEvent<
  $ReadOnly<
    {|
      target: number,
    |},
  >,
>;

type MouseEvent = SyntheticEvent<
  $ReadOnly<
    {|
      clientX: number,
      clientY: number,
      pageX: number,
      pageY: number,
      timestamp: number,
    |},
  >,
>;
export type {SyntheticEvent};

export type {ResponderSyntheticEvent};

export type {Layout};

export type {TextLayout};

export type {LayoutEvent};

export type {TextLayoutEvent};

export type {PressEvent};

export type {ScrollEvent};

export type {BlurEvent};

export type {FocusEvent};

export type {MouseEvent};
