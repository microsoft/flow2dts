// @flow
declare var React: typeof $2;
const $2 = require("react");

import type {HostComponent} from "../Renderer/shims/ReactNativeTypes";

type HostRef = React.ElementRef<HostComponent<mixed>>;

type ReactRenderer = {
  rendererConfig: {
    getInspectorDataForViewAtPoint: (
      inspectedView: ?HostRef,
      locationX: number,
      locationY: number,
      callback: Function
    ) => void,
    ...,
  },
};

declare class Inspector
  extends $1<
    {
      inspectedView: ?HostRef,
      onRequestRerenderApp: (callback: (instance: ?HostRef) => void) => void,
      ...,
    },
    {
      devtoolsAgent: ?Object,
      hierarchy: any,
      panelPos: string,
      inspecting: boolean,
      selection: ?number,
      perfing: boolean,
      inspected: any,
      inspectedView: ?HostRef,
      networking: boolean,
      ...,
    },
  > {
  constructor(props: Object): void,
  
  componentDidMount(): void,
  
  componentWillUnmount(): void,
  
  UNSAFE_componentWillReceiveProps(newProps: Object): void,
  
  setSelection(i: number): void,
  
  onTouchPoint(locationX: number, locationY: number): void,
  
  setPerfing(val: boolean): void,
  
  setInspecting(val: boolean): void,
  
  setTouchTargeting(val: boolean): void,
  
  setNetworking(val: boolean): void,
  
  render(): React.Node,
}
declare var $1: typeof React.Component;
export type {ReactRenderer};

declare module.exports: typeof Inspector;
