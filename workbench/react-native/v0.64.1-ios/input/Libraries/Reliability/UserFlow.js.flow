// @flow
type FlowId = {
  markerId: number,
  instanceKey: number,
};

type PointData = $Shape<
  {
    string: ?{[string]: string,...},
    int: ?{[string]: number,...},
    double: ?{[string]: number,...},
    bool: ?{[string]: boolean,...},
    string_array: ?{[string]: $ReadOnlyArray<string>,...},
    int_array: ?{[string]: $ReadOnlyArray<number>,...},
    double_array: ?{[string]: $ReadOnlyArray<number>,...},
    bool_array: ?{[string]: $ReadOnlyArray<boolean>,...},
  },
>;

declare var UserFlow: {|
  /**
   * Creates FlowId from markerId and instanceKey.
   * You will pass FlowId in every other method of UserFlow API.
   *
   * By default, instanceKey will generate unique instance every time you call userFlowGetId with markerId only.
   */
  newFlowId(markerId: number, instanceKey?: number): FlowId,
  
  start(flowId: FlowId, triggerSource: string): void,
  
  addAnnotation(
    flowId: FlowId,
    annotationName: string,
    annotationValue: string | boolean
  ): void,
  
  addPoint(flowId: FlowId, pointName: string, data?: ?PointData): void,
  
  endSuccess(flowId: FlowId): void,
  
  endFailure(flowId: FlowId, errorName: string, debugInfo?: ?string): void,
  
  endCancel(flowId: FlowId, cancelReason: string): void,
|};
export type {FlowId};

export type {PointData};

declare module.exports: typeof UserFlow;
