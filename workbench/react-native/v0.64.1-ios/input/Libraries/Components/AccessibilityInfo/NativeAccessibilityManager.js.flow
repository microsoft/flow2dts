// @flow
import type {TurboModule} from "../../TurboModule/RCTExport";

interface Spec extends TurboModule {
  +getCurrentBoldTextState: (
    onSuccess: (isBoldTextEnabled: boolean) => void,
    onError: (error: Object) => void
  ) => void,
  +getCurrentGrayscaleState: (
    onSuccess: (isGrayscaleEnabled: boolean) => void,
    onError: (error: Object) => void
  ) => void,
  +getCurrentInvertColorsState: (
    onSuccess: (isInvertColorsEnabled: boolean) => void,
    onError: (error: Object) => void
  ) => void,
  +getCurrentReduceMotionState: (
    onSuccess: (isReduceMotionEnabled: boolean) => void,
    onError: (error: Object) => void
  ) => void,
  +getCurrentReduceTransparencyState: (
    onSuccess: (isReduceTransparencyEnabled: boolean) => void,
    onError: (error: Object) => void
  ) => void,
  +getCurrentVoiceOverState: (
    onSuccess: (isScreenReaderEnabled: boolean) => void,
    onError: (error: Object) => void
  ) => void,
  +setAccessibilityContentSizeMultipliers: (
    JSMultipliers: {|
      +extraSmall?: ?number,
      +small?: ?number,
      +medium?: ?number,
      +large?: ?number,
      +extraLarge?: ?number,
      +extraExtraLarge?: ?number,
      +extraExtraExtraLarge?: ?number,
      +accessibilityMedium?: ?number,
      +accessibilityLarge?: ?number,
      +accessibilityExtraLarge?: ?number,
      +accessibilityExtraExtraLarge?: ?number,
      +accessibilityExtraExtraExtraLarge?: ?number,
    |}
  ) => void,
  +setAccessibilityFocus: (reactTag: number) => void,
  +announceForAccessibility: (announcement: string) => void,
}
export type {Spec};

declare export default ?Spec;
