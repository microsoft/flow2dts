// @flow
import * as React from "react";

import type {WithDefault} from "react-native/Libraries/Types/CodegenTypes";
import type {BubblingEventHandler} from "react-native/Libraries/Types/CodegenTypes";

import type {HostComponent} from "react-native/Libraries/Renderer/shims/ReactNativeTypes";

import type {ColorValue} from "../../StyleSheet/StyleSheet";
import type {ViewProps} from "../View/ViewPropTypes";

type SwitchChangeEvent = $ReadOnly<
  {|
    value: boolean,
  |},
>;

type NativeProps = $ReadOnly<
  {|
    ...ViewProps,
    
    // Props
    disabled?: WithDefault<boolean, false>,
    enabled?: WithDefault<boolean, true>,
    thumbColor?: ?ColorValue,
    trackColorForFalse?: ?ColorValue,
    trackColorForTrue?: ?ColorValue,
    value?: WithDefault<boolean, false>,
    on?: WithDefault<boolean, false>,
    thumbTintColor?: ?ColorValue,
    trackTintColor?: ?ColorValue,
    
    // Events
    onChange?: BubblingEventHandler<SwitchChangeEvent>,
  |},
>;

type NativeType = HostComponent<NativeProps>;

interface NativeCommands {
  +setNativeValue: (
    viewRef: React.ElementRef<NativeType>,
    value: boolean
  ) => void,
}

declare var Commands: NativeCommands;
export {Commands};

declare export default NativeType;
