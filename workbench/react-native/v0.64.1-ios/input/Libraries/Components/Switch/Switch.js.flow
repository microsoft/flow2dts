// @flow
import * as React from "react";

import type {ColorValue} from "../../StyleSheet/StyleSheet";
import type {SyntheticEvent} from "../../Types/CoreEventTypes";
import type {ViewProps} from "../View/ViewPropTypes";

type SwitchChangeEvent = SyntheticEvent<
  $ReadOnly<
    {|
      value: boolean,
    |},
  >,
>;

type Props = $ReadOnly<
  {|
    ...ViewProps,
    
    /**
    If true the user won't be able to toggle the switch.

    @default false
   */
    disabled?: ?boolean,
    
    /**
    The value of the switch. If true the switch will be turned on.

    @default false
   */
    value?: ?boolean,
    
    /**
    Color of the foreground switch grip. If this is set on iOS, the switch grip will lose its drop shadow.
   */
    thumbColor?: ?ColorValue,
    
    /**
    Custom colors for the switch track.

    _iOS_: When the switch value is false, the track shrinks into the border. If you want to change the
    color of the background exposed by the shrunken track, use
     [`ios_backgroundColor`](https://reactnative.dev/docs/switch#ios_backgroundColor).
   */
    trackColor?: ?$ReadOnly<
      {|
        false?: ?ColorValue,
        true?: ?ColorValue,
      |},
    >,
    
    /**
    On iOS, custom color for the background. This background color can be
    seen either when the switch value is false or when the switch is
    disabled (and the switch is translucent).
   */
    ios_backgroundColor?: ?ColorValue,
    
    /**
    Invoked when the user tries to change the value of the switch. Receives
    the change event as an argument. If you want to only receive the new
    value, use `onValueChange` instead.
   */
    onChange?: ?((event: SwitchChangeEvent) => Promise<void> | void),
    
    /**
    Invoked when the user tries to change the value of the switch. Receives
    the new value as an argument. If you want to instead receive an event,
    use `onChange`.
   */
    onValueChange?: ?((value: boolean) => Promise<void> | void),
  |},
>;

declare class Switch
  extends $1<Props> {
  render(): React.Node,
  
  componentDidUpdate(): void,
}
declare var $1: typeof React.Component;
export type {Props};

declare module.exports: typeof Switch;
