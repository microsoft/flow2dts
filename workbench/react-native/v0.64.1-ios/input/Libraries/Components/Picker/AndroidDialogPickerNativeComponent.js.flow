// @flow
import * as React from "react";

import type {DirectEventHandler} from "../../Types/CodegenTypes";
import type {Int32} from "../../Types/CodegenTypes";
import type {WithDefault} from "../../Types/CodegenTypes";
import type {HostComponent} from "../../Renderer/shims/ReactNativeTypes";
import type {TextStyleProp} from "../../StyleSheet/StyleSheet";
import type {ColorValue} from "../../StyleSheet/StyleSheet";
import type {ProcessedColorValue} from "../../StyleSheet/processColor";
import type {ViewProps} from "../../Components/View/ViewPropTypes";

type PickerItem = $ReadOnly<
  {|
    label: string,
    color?: ?ProcessedColorValue,
  |},
>;

type PickerItemSelectEvent = $ReadOnly<
  {|
    position: Int32,
  |},
>;

type NativeProps = $ReadOnly<
  {|
    ...ViewProps,
    style?: ?TextStyleProp,
    
    // Props
    color?: ?ColorValue,
    backgroundColor?: ?ColorValue,
    enabled?: WithDefault<boolean, true>,
    items: $ReadOnlyArray<PickerItem>,
    prompt?: WithDefault<string, ''>,
    selected: Int32,
    
    // Events
    onSelect?: DirectEventHandler<PickerItemSelectEvent>,
  |},
>;

type NativeType = HostComponent<NativeProps>;

interface NativeCommands {
  +setNativeSelectedPosition: (
    viewRef: React.ElementRef<NativeType>,
    index: number
  ) => void,
}

declare var Commands: NativeCommands;
export {Commands};

declare export default NativeType;
