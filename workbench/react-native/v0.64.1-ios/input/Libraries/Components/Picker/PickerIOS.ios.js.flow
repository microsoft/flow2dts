// @flow
declare var React: typeof $2;
const $2 = require("react");

import type {TextStyleProp} from "../../StyleSheet/StyleSheet";
import type {ColorValue} from "../../StyleSheet/StyleSheet";
import type {ProcessedColorValue} from "../../StyleSheet/processColor";
import type {SyntheticEvent} from "../../Types/CoreEventTypes";
import type {ViewProps} from "../View/ViewPropTypes";

type PickerIOSChangeEvent = SyntheticEvent<
  $ReadOnly<
    {|
      newValue: number | string,
      newIndex: number,
    |},
  >,
>;

type RCTPickerIOSItemType = $ReadOnly<
  {|
    label: ?Label,
    value: ?string,
    textColor: ?ProcessedColorValue,
  |},
>;

type Label = Stringish | number;

type Props = $ReadOnly<
  {|
    ...ViewProps,
    children: React.ChildrenArray<React.Element<typeof PickerIOSItem>>,
    itemStyle?: ?TextStyleProp,
    onChange?: ?((event: PickerIOSChangeEvent) => mixed),
    onValueChange?: ?((itemValue: string | number, itemIndex: number) => mixed),
    selectedValue: ?string,
    accessibilityLabel?: ?string,
  |},
>;

type State = {|
  selectedIndex: number,
  items: $ReadOnlyArray<RCTPickerIOSItemType>,
|};

type ItemProps = $ReadOnly<
  {|
    label: ?Label,
    value?: ?string,
    color?: ?ColorValue,
  |},
>;

declare var PickerIOSItem: (props: ItemProps) => null;

declare class PickerIOS
  extends $1<Props, State> {
  state: State,
  
  static Item: (props: ItemProps) => null,
  
  static getDerivedStateFromProps(props: Props): State,
  
  render(): React.Node,
  
  componentDidUpdate(): void,
}
declare var $1: typeof React.Component;

declare module.exports: typeof PickerIOS;
