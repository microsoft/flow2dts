// @flow
declare var React: typeof $2;
const $2 = require("react");

import type {ViewProps} from "../Components/View/ViewPropTypes";

import type {RootTag} from "../ReactNative/RootTag";
import type {DirectEventHandler} from "../Types/CodegenTypes";

type OrientationChangeEvent = $ReadOnly<
  {|
    orientation: 'portrait' | 'landscape',
  |},
>;

type Props = $ReadOnly<
  {|
    ...ViewProps,
    
    /**
   * The `animationType` prop controls how the modal animates.
   *
   * See https://reactnative.dev/docs/modal.html#animationtype
   */
    animationType?: ?('none' | 'slide' | 'fade'),
    
    /**
   * The `presentationStyle` prop controls how the modal appears.
   *
   * See https://reactnative.dev/docs/modal.html#presentationstyle
   */
    presentationStyle?: ?(
      | 'fullScreen'
      | 'pageSheet'
      | 'formSheet'
      | 'overFullScreen'),
    
    /**
   * The `transparent` prop determines whether your modal will fill the
   * entire view.
   *
   * See https://reactnative.dev/docs/modal.html#transparent
   */
    transparent?: ?boolean,
    
    /**
   * The `statusBarTranslucent` prop determines whether your modal should go under
   * the system statusbar.
   *
   * See https://reactnative.dev/docs/modal.html#transparent
   */
    statusBarTranslucent?: ?boolean,
    
    /**
   * The `hardwareAccelerated` prop controls whether to force hardware
   * acceleration for the underlying window.
   *
   * This prop works only on Android.
   *
   * See https://reactnative.dev/docs/modal.html#hardwareaccelerated
   */
    hardwareAccelerated?: ?boolean,
    
    /**
   * The `visible` prop determines whether your modal is visible.
   *
   * See https://reactnative.dev/docs/modal.html#visible
   */
    visible?: ?boolean,
    
    /**
   * The `onRequestClose` callback is called when the user taps the hardware
   * back button on Android or the menu button on Apple TV.
   *
   * This is required on Apple TV and Android.
   *
   * See https://reactnative.dev/docs/modal.html#onrequestclose
   */
    onRequestClose?: ?DirectEventHandler<null>,
    
    /**
   * The `onShow` prop allows passing a function that will be called once the
   * modal has been shown.
   *
   * See https://reactnative.dev/docs/modal.html#onshow
   */
    onShow?: ?DirectEventHandler<null>,
    
    /**
   * The `onDismiss` prop allows passing a function that will be called once
   * the modal has been dismissed.
   *
   * See https://reactnative.dev/docs/modal.html#ondismiss
   */
    onDismiss?: ?(() => mixed),
    
    /**
   * The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.
   *
   * See https://reactnative.dev/docs/modal.html#supportedorientations
   */
    supportedOrientations?: ?$ReadOnlyArray<
      
        | 'portrait'
        | 'portrait-upside-down'
        | 'landscape'
        | 'landscape-left'
        | 'landscape-right',
    >,
    
    /**
   * The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.
   *
   * See https://reactnative.dev/docs/modal.html#onorientationchange
   */
    onOrientationChange?: ?DirectEventHandler<OrientationChangeEvent>,
  |},
>;

declare class Modal
  extends $1<Props> {
  static defaultProps: {|hardwareAccelerated: boolean, visible: boolean|},
  
  static contextType: React.Context<RootTag>,
  
  constructor(props: Props): void,
  
  componentDidMount(): void,
  
  componentWillUnmount(): void,
  
  UNSAFE_componentWillReceiveProps(nextProps: Props): void,
  
  render(): React.Node,
}
declare var $1: typeof React.Component;
export type {Props};

declare module.exports: typeof Modal;
