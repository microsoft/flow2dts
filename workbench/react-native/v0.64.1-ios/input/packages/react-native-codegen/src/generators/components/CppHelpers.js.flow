// @flow
import type {PropTypeShape} from "../../CodegenSchema";

declare function toSafeCppString(input: string): string;

declare function toIntEnumValueName(propName: string, value: number): string;

declare function getCppTypeForAnnotation(
  type: 
    | 'BooleanTypeAnnotation'
    | 'StringTypeAnnotation'
    | 'Int32TypeAnnotation'
    | 'DoubleTypeAnnotation'
    | 'FloatTypeAnnotation'
): string;

declare function getImports(
  properties: $ReadOnlyArray<PropTypeShape>
): Set<string>;

declare function generateEventStructName(parts?: $ReadOnlyArray<string>): string;

declare function generateStructName(
  componentName: string,
  parts?: $ReadOnlyArray<string>
): string;

declare function getEnumName(componentName: string, propName: string): string;

declare function getEnumMaskName(enumName: string): string;

declare function convertDefaultTypeToString(
  componentName: string,
  prop: PropTypeShape
): string;

declare module.exports: {|
  convertDefaultTypeToString: typeof convertDefaultTypeToString,
  getCppTypeForAnnotation: typeof getCppTypeForAnnotation,
  getEnumName: typeof getEnumName,
  getEnumMaskName: typeof getEnumMaskName,
  getImports: typeof getImports,
  toSafeCppString: typeof toSafeCppString,
  toIntEnumValueName: typeof toIntEnumValueName,
  generateStructName: typeof generateStructName,
  generateEventStructName: typeof generateEventStructName,
|};
