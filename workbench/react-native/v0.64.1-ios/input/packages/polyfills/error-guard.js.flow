// @flow
type ErrorHandler = (error: mixed, isFatal: boolean) => void;
type Fn<Args, Return> = (...Args) => Return;

declare var ErrorUtils: {|
  setGlobalHandler(fun: ErrorHandler): void,
  getGlobalHandler(): ErrorHandler,
  reportError(error: mixed): void,
  reportFatalError(error: mixed): void,
  applyWithGuard<TArgs: $ReadOnlyArray<mixed>, TOut>(
    fun: Fn<TArgs, TOut>,
    context?: ?mixed,
    args?: ?TArgs,
    // Unused, but some code synced from www sets it to null.
    unused_onError?: null,
    // Some callers pass a name here, which we ignore.
    unused_name?: ?string
  ): ?TOut,
  applyWithGuardIfNeeded<TArgs: $ReadOnlyArray<mixed>, TOut>(
    fun: Fn<TArgs, TOut>,
    context?: ?mixed,
    args?: ?TArgs
  ): ?TOut,
  inGuard(): boolean,
  guard<TArgs: $ReadOnlyArray<mixed>, TOut>(
    fun: Fn<TArgs, TOut>,
    name?: ?string,
    context?: ?mixed
  ): ?((...TArgs) => ?TOut),
|};

type ErrorUtilsT = typeof ErrorUtils;
export type {ErrorUtilsT};
