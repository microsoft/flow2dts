// @flow
declare var ParserError: typeof $2.ParserError;
declare var $2: typeof $1;
const $1 = require("./errors");

type TypeDeclarationMap = {|[declarationName: string]: $FlowFixMe|};

declare function getTypes(ast: $FlowFixMe): TypeDeclarationMap;

type ASTNode = Object;

type TypeAliasResolutionStatus = 
  | $ReadOnly<
    {|
      successful: true,
      aliasName: string,
    |},
  >
  | $ReadOnly<
    {|
      successful: false,
    |},
  >;

declare function resolveTypeAnnotation(
  // TODO(T71778680): This is an Flow TypeAnnotation. Flow-type this
  typeAnnotation: $FlowFixMe,
  types: TypeDeclarationMap
): {
  nullable: boolean,
  typeAnnotation: $FlowFixMe,
  typeAliasResolutionStatus: TypeAliasResolutionStatus,
};

declare function getValueFromTypes(
  value: ASTNode,
  types: TypeDeclarationMap
): ASTNode;

type ParserErrorCapturer = <T>(fn: () => T) => ?T;

declare function createParserErrorCapturer(): [
  Array<ParserError>,
  ParserErrorCapturer,
];
export type {TypeDeclarationMap};

export type {ASTNode};

export type {ParserErrorCapturer};

declare module.exports: {|
  getValueFromTypes: typeof getValueFromTypes,
  resolveTypeAnnotation: typeof resolveTypeAnnotation,
  createParserErrorCapturer: typeof createParserErrorCapturer,
  getTypes: typeof getTypes,
|};
