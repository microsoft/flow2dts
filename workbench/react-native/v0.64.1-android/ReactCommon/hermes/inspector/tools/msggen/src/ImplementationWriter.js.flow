// @flow
import {Writable} from "stream";

import {PropsType} from "./Type";
import {Type} from "./Type";
import {Command} from "./Command";
import {Event} from "./Event";

declare class ImplementationWriter {
  stream: Writable,
  types: Array<Type>,
  commands: Array<Command>,
  events: Array<Event>,
  
  constructor(
    stream: Writable,
    types: Array<Type>,
    commands: Array<Command>,
    events: Array<Event>
  ): void,
  
  write(): void,
  
  writePrologue(): void,
  
  writeRequestParser(): void,
  
  writeTypeDefs(): void,
  
  writeRequestDefs(): void,
  
  writeResponseDefs(): void,
  
  writeNotificationDefs(): void,
  
  writeEpilogue(): void,
}

declare function emitTypeDef(stream: Writable, type: PropsType): void;

declare function emitRequestDef(stream: Writable, command: Command): void;

declare function emitResponseDef(stream: Writable, command: Command): void;

declare function emitNotificationDef(stream: Writable, event: Event): void;
export {ImplementationWriter};

export {emitTypeDef};

export {emitRequestDef};

export {emitResponseDef};

export {emitNotificationDef};
