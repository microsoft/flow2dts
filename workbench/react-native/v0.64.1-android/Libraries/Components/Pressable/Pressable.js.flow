// @flow
import * as React from "react";

import type {RippleConfig} from "./useAndroidRippleForView";
import type {AccessibilityActionEvent} from "../View/ViewAccessibility";
import type {AccessibilityActionInfo} from "../View/ViewAccessibility";
import type {AccessibilityRole} from "../View/ViewAccessibility";
import type {AccessibilityState} from "../View/ViewAccessibility";
import type {AccessibilityValue} from "../View/ViewAccessibility";

import type {RectOrSize} from "../../StyleSheet/Rect";
import type {LayoutEvent} from "../../Types/CoreEventTypes";
import type {PressEvent} from "../../Types/CoreEventTypes";
import View from "../View/View";

type ViewStyleProp = $ElementType<React.ElementConfig<typeof View>, 'style'>;

type StateCallbackType = $ReadOnly<
  {|
    pressed: boolean,
  |},
>;

type Props = $ReadOnly<
  {|
    /**
   * Accessibility.
   */
    accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,
    accessibilityElementsHidden?: ?boolean,
    accessibilityHint?: ?Stringish,
    accessibilityIgnoresInvertColors?: ?boolean,
    accessibilityLabel?: ?Stringish,
    accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),
    accessibilityRole?: ?AccessibilityRole,
    accessibilityState?: ?AccessibilityState,
    accessibilityValue?: ?AccessibilityValue,
    accessibilityViewIsModal?: ?boolean,
    accessible?: ?boolean,
    focusable?: ?boolean,
    importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),
    onAccessibilityAction?: ?((event: AccessibilityActionEvent) => mixed),
    
    /**
   * Either children or a render prop that receives a boolean reflecting whether
   * the component is currently pressed.
   */
    children: React.Node | ((state: StateCallbackType) => React.Node),
    
    /**
   * Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.
   */
    delayLongPress?: ?number,
    
    /**
   * Whether the press behavior is disabled.
   */
    disabled?: ?boolean,
    
    /**
   * Additional distance outside of this view in which a press is detected.
   */
    hitSlop?: ?RectOrSize,
    
    /**
   * Additional distance outside of this view in which a touch is considered a
   * press before `onPressOut` is triggered.
   */
    pressRetentionOffset?: ?RectOrSize,
    
    /**
   * Called when this view's layout changes.
   */
    onLayout?: ?((event: LayoutEvent) => void),
    
    /**
   * Called when a long-tap gesture is detected.
   */
    onLongPress?: ?((event: PressEvent) => void),
    
    /**
   * Called when a single tap gesture is detected.
   */
    onPress?: ?((event: PressEvent) => void),
    
    /**
   * Called when a touch is engaged before `onPress`.
   */
    onPressIn?: ?((event: PressEvent) => void),
    
    /**
   * Called when a touch is released before `onPress`.
   */
    onPressOut?: ?((event: PressEvent) => void),
    
    /**
   * Either view styles or a function that receives a boolean reflecting whether
   * the component is currently pressed and returns view styles.
   */
    style?: ViewStyleProp | ((state: StateCallbackType) => ViewStyleProp),
    
    /**
   * Identifier used to find this view in tests.
   */
    testID?: ?string,
    
    /**
   * If true, doesn't play system sound on touch.
   */
    android_disableSound?: ?boolean,
    
    /**
   * Enables the Android ripple effect and configures its color.
   */
    android_ripple?: ?RippleConfig,
    
    /**
   * Used only for documentation or testing (e.g. snapshot testing).
   */
    testOnly_pressed?: ?boolean,
    
    /**
   * Duration to wait after press down before calling `onPressIn`.
   */
    unstable_pressDelay?: ?number,
  |},
>;
export type {StateCallbackType};

declare export default React.AbstractComponent<
  Props,
  React.ElementRef<typeof View>,
>;
