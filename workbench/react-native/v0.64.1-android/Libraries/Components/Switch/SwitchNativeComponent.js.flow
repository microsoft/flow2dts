// @flow
import type {BubblingEventHandler} from "../../Types/CodegenTypes";
import type {WithDefault} from "../../Types/CodegenTypes";
import type {ColorValue} from "../../StyleSheet/StyleSheet";
import type {ViewProps} from "../View/ViewPropTypes";
import * as React from "react";

import type {HostComponent} from "../../Renderer/shims/ReactNativeTypes";

type SwitchChangeEvent = $ReadOnly<
  {|
    value: boolean,
  |},
>;

type NativeProps = $ReadOnly<
  {|
    ...ViewProps,
    
    // Props
    disabled?: WithDefault<boolean, false>,
    value?: WithDefault<boolean, false>,
    tintColor?: ?ColorValue,
    onTintColor?: ?ColorValue,
    thumbTintColor?: ?ColorValue,
    
    // Deprecated props
    thumbColor?: ?ColorValue,
    trackColorForFalse?: ?ColorValue,
    trackColorForTrue?: ?ColorValue,
    
    // Events
    onChange?: ?BubblingEventHandler<SwitchChangeEvent>,
  |},
>;

type ComponentType = HostComponent<NativeProps>;

interface NativeCommands {
  +setValue: (viewRef: React.ElementRef<ComponentType>, value: boolean) => void,
}

declare var Commands: NativeCommands;
export {Commands};

declare export default ComponentType;
