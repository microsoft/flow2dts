// @flow
declare var DeprecatedTextInputPropTypes: typeof $1;
const $1 = require("../../DeprecatedPropTypes/DeprecatedTextInputPropTypes");

declare var React: typeof $2;
const $2 = require("react");

declare var TextInputState: typeof $3;
const $3 = require("./TextInputState");

import type {TextStyleProp} from "../../StyleSheet/StyleSheet";
import type {ViewStyleProp} from "../../StyleSheet/StyleSheet";
import type {ColorValue} from "../../StyleSheet/StyleSheet";
import type {ViewProps} from "../View/ViewPropTypes";
import type {SyntheticEvent} from "../../Types/CoreEventTypes";
import type {ScrollEvent} from "../../Types/CoreEventTypes";
import type {PressEvent} from "../../Types/CoreEventTypes";
import type {HostComponent} from "../../Renderer/shims/ReactNativeTypes";

type ReactRefSetter<T> = {current: null | T,...} | ((ref: null | T) => mixed);

type ChangeEvent = SyntheticEvent<
  $ReadOnly<
    {|
      eventCount: number,
      target: number,
      text: string,
    |},
  >,
>;

type TextInputEvent = SyntheticEvent<
  $ReadOnly<
    {|
      eventCount: number,
      previousText: string,
      range: $ReadOnly<
        {|
          start: number,
          end: number,
        |},
      >,
      target: number,
      text: string,
    |},
  >,
>;

type ContentSizeChangeEvent = SyntheticEvent<
  $ReadOnly<
    {|
      target: number,
      contentSize: $ReadOnly<
        {|
          width: number,
          height: number,
        |},
      >,
    |},
  >,
>;

type TargetEvent = SyntheticEvent<
  $ReadOnly<
    {|
      target: number,
    |},
  >,
>;

type BlurEvent = TargetEvent;
type FocusEvent = TargetEvent;

type Selection = $ReadOnly<
  {|
    start: number,
    end: number,
  |},
>;

type SelectionChangeEvent = SyntheticEvent<
  $ReadOnly<
    {|
      selection: Selection,
      target: number,
    |},
  >,
>;

type KeyPressEvent = SyntheticEvent<
  $ReadOnly<
    {|
      key: string,
      target?: ?number,
      eventCount?: ?number,
    |},
  >,
>;

type EditingEvent = SyntheticEvent<
  $ReadOnly<
    {|
      eventCount: number,
      text: string,
      target: number,
    |},
  >,
>;

type DataDetectorTypesType = 
  | 'phoneNumber'
  | 'link'
  | 'address'
  | 'calendarEvent'
  | 'none'
  | 'all';

type KeyboardType =
// Cross Platform
| 'default'
  | 'email-address'
  | 'numeric'
  | 'phone-pad'
  | 'number-pad'
  | 'decimal-pad'
  // iOS-only
  
  | 'ascii-capable'
  | 'numbers-and-punctuation'
  | 'url'
  | 'name-phone-pad'
  | 'twitter'
  | 'web-search'
  // iOS 10+ only
  
  | 'ascii-capable-number-pad'
  // Android-only
  
  | 'visible-password';

type ReturnKeyType =
// Cross Platform
| 'done'
  | 'go'
  | 'next'
  | 'search'
  | 'send'
  // Android-only
  
  | 'none'
  | 'previous'
  // iOS-only
  
  | 'default'
  | 'emergency-call'
  | 'google'
  | 'join'
  | 'route'
  | 'yahoo';

type AutoCapitalize = 'none' | 'sentences' | 'words' | 'characters';

type TextContentType = 
  | 'none'
  | 'URL'
  | 'addressCity'
  | 'addressCityAndState'
  | 'addressState'
  | 'countryName'
  | 'creditCardNumber'
  | 'emailAddress'
  | 'familyName'
  | 'fullStreetAddress'
  | 'givenName'
  | 'jobTitle'
  | 'location'
  | 'middleName'
  | 'name'
  | 'namePrefix'
  | 'nameSuffix'
  | 'nickname'
  | 'organizationName'
  | 'postalCode'
  | 'streetAddressLine1'
  | 'streetAddressLine2'
  | 'sublocality'
  | 'telephoneNumber'
  | 'username'
  | 'password'
  | 'newPassword'
  | 'oneTimeCode';

type PasswordRules = string;

type IOSProps = $ReadOnly<
  {|
    /**
   * If `false`, disables spell-check style (i.e. red underlines).
   * The default value is inherited from `autoCorrect`.
   * @platform ios
   */
    spellCheck?: ?boolean,
    
    /**
   * Determines the color of the keyboard.
   * @platform ios
   */
    keyboardAppearance?: ?('default' | 'light' | 'dark'),
    
    /**
   * If `true`, the keyboard disables the return key when there is no text and
   * automatically enables it when there is text. The default value is `false`.
   * @platform ios
   */
    enablesReturnKeyAutomatically?: ?boolean,
    
    /**
   * When the clear button should appear on the right side of the text view.
   * This property is supported only for single-line TextInput component.
   * @platform ios
   */
    clearButtonMode?: ?('never' | 'while-editing' | 'unless-editing' | 'always'),
    
    /**
   * If `true`, clears the text field automatically when editing begins.
   * @platform ios
   */
    clearTextOnFocus?: ?boolean,
    
    /**
   * Determines the types of data converted to clickable URLs in the text input.
   * Only valid if `multiline={true}` and `editable={false}`.
   * By default no data types are detected.
   *
   * You can provide one type or an array of many types.
   *
   * Possible values for `dataDetectorTypes` are:
   *
   * - `'phoneNumber'`
   * - `'link'`
   * - `'address'`
   * - `'calendarEvent'`
   * - `'none'`
   * - `'all'`
   *
   * @platform ios
   */
    dataDetectorTypes?: 
      | ?DataDetectorTypesType
      | $ReadOnlyArray<DataDetectorTypesType>,
    
    /**
   * An optional identifier which links a custom InputAccessoryView to
   * this text input. The InputAccessoryView is rendered above the
   * keyboard when this text input is focused.
   * @platform ios
   */
    inputAccessoryViewID?: ?string,
    
    /**
   * Give the keyboard and the system information about the
   * expected semantic meaning for the content that users enter.
   * @platform ios
   */
    textContentType?: ?TextContentType,
    
    /**
   * Provide rules for your password.
   * For example, say you want to require a password with at least eight characters consisting of a mix of uppercase and lowercase letters, at least one number, and at most two consecutive characters.
   * "required: upper; required: lower; required: digit; max-consecutive: 2; minlength: 8;"
   * @platform ios
   */
    passwordRules?: ?PasswordRules,
    
    /*
   * If `true`, allows TextInput to pass touch events to the parent component.
   * This allows components to be swipeable from the TextInput on iOS,
   * as is the case on Android by default.
   * If `false`, TextInput always asks to handle the input (except when disabled).
   * @platform ios
   */
    rejectResponderTermination?: ?boolean,
    
    /**
   * If `false`, scrolling of the text view will be disabled.
   * The default value is `true`. Does only work with 'multiline={true}'.
   * @platform ios
   */
    scrollEnabled?: ?boolean,
  |},
>;

type AndroidProps = $ReadOnly<
  {|
    /**
   * Determines which content to suggest on auto complete, e.g.`username`.
   * To disable auto complete, use `off`.
   *
   * *Android Only*
   *
   * The following values work on Android only:
   *
   * - `username`
   * - `password`
   * - `email`
   * - `name`
   * - `tel`
   * - `street-address`
   * - `postal-code`
   * - `cc-number`
   * - `cc-csc`
   * - `cc-exp`
   * - `cc-exp-month`
   * - `cc-exp-year`
   * - `off`
   *
   * @platform android
   */
    autoCompleteType?: ?(
      | 'cc-csc'
      | 'cc-exp'
      | 'cc-exp-month'
      | 'cc-exp-year'
      | 'cc-number'
      | 'email'
      | 'name'
      | 'password'
      | 'postal-code'
      | 'street-address'
      | 'tel'
      | 'username'
      | 'off'),
    
    /**
   * Sets the return key to the label. Use it instead of `returnKeyType`.
   * @platform android
   */
    returnKeyLabel?: ?string,
    
    /**
   * Sets the number of lines for a `TextInput`. Use it with multiline set to
   * `true` to be able to fill the lines.
   * @platform android
   */
    numberOfLines?: ?number,
    
    /**
   * When `false`, if there is a small amount of space available around a text input
   * (e.g. landscape orientation on a phone), the OS may choose to have the user edit
   * the text inside of a full screen text input mode. When `true`, this feature is
   * disabled and users will always edit the text directly inside of the text input.
   * Defaults to `false`.
   * @platform android
   */
    disableFullscreenUI?: ?boolean,
    
    /**
   * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`
   * The default value is `simple`.
   * @platform android
   */
    textBreakStrategy?: ?('simple' | 'highQuality' | 'balanced'),
    
    /**
   * The color of the `TextInput` underline.
   * @platform android
   */
    underlineColorAndroid?: ?ColorValue,
    
    /**
   * If defined, the provided image resource will be rendered on the left.
   * The image resource must be inside `/android/app/src/main/res/drawable` and referenced
   * like
   * ```
   * <TextInput
   *  inlineImageLeft='search_icon'
   * />
   * ```
   * @platform android
   */
    inlineImageLeft?: ?string,
    
    /**
   * Padding between the inline image, if any, and the text input itself.
   * @platform android
   */
    inlineImagePadding?: ?number,
    
    importantForAutofill?: ?(
      | 'auto'
      | 'no'
      | 'noExcludeDescendants'
      | 'yes'
      | 'yesExcludeDescendants'),
    
    /**
   * When `false`, it will prevent the soft keyboard from showing when the field is focused.
   * Defaults to `true`.
   */
    showSoftInputOnFocus?: ?boolean,
  |},
>;

type Props = $ReadOnly<
  {|
    ...$Diff<ViewProps, $ReadOnly<{|style: ?ViewStyleProp|}>>,
    ...IOSProps,
    ...AndroidProps,
    
    /**
   * Can tell `TextInput` to automatically capitalize certain characters.
   *
   * - `characters`: all characters.
   * - `words`: first letter of each word.
   * - `sentences`: first letter of each sentence (*default*).
   * - `none`: don't auto capitalize anything.
   */
    autoCapitalize?: ?AutoCapitalize,
    
    /**
   * If `false`, disables auto-correct. The default value is `true`.
   */
    autoCorrect?: ?boolean,
    
    /**
   * If `true`, focuses the input on `componentDidMount`.
   * The default value is `false`.
   */
    autoFocus?: ?boolean,
    
    /**
   * Specifies whether fonts should scale to respect Text Size accessibility settings. The
   * default is `true`.
   */
    allowFontScaling?: ?boolean,
    
    /**
   * Specifies largest possible scale a font can reach when `allowFontScaling` is enabled.
   * Possible values:
   * `null/undefined` (default): inherit from the parent node or the global default (0)
   * `0`: no max, ignore parent/global default
   * `>= 1`: sets the maxFontSizeMultiplier of this node to this value
   */
    maxFontSizeMultiplier?: ?number,
    
    /**
   * If `false`, text is not editable. The default value is `true`.
   */
    editable?: ?boolean,
    
    /**
   * Determines which keyboard to open, e.g.`numeric`.
   *
   * The following values work across platforms:
   *
   * - `default`
   * - `numeric`
   * - `number-pad`
   * - `decimal-pad`
   * - `email-address`
   * - `phone-pad`
   *
   * *iOS Only*
   *
   * The following values work on iOS only:
   *
   * - `ascii-capable`
   * - `numbers-and-punctuation`
   * - `url`
   * - `name-phone-pad`
   * - `twitter`
   * - `web-search`
   *
   * *Android Only*
   *
   * The following values work on Android only:
   *
   * - `visible-password`
   *
   */
    keyboardType?: ?KeyboardType,
    
    /**
   * Determines how the return key should look. On Android you can also use
   * `returnKeyLabel`.
   *
   * *Cross platform*
   *
   * The following values work across platforms:
   *
   * - `done`
   * - `go`
   * - `next`
   * - `search`
   * - `send`
   *
   * *Android Only*
   *
   * The following values work on Android only:
   *
   * - `none`
   * - `previous`
   *
   * *iOS Only*
   *
   * The following values work on iOS only:
   *
   * - `default`
   * - `emergency-call`
   * - `google`
   * - `join`
   * - `route`
   * - `yahoo`
   */
    returnKeyType?: ?ReturnKeyType,
    
    /**
   * Limits the maximum number of characters that can be entered. Use this
   * instead of implementing the logic in JS to avoid flicker.
   */
    maxLength?: ?number,
    
    /**
   * If `true`, the text input can be multiple lines.
   * The default value is `false`.
   */
    multiline?: ?boolean,
    
    /**
   * Callback that is called when the text input is blurred.
   */
    onBlur?: ?((e: BlurEvent) => mixed),
    
    /**
   * Callback that is called when the text input is focused.
   */
    onFocus?: ?((e: FocusEvent) => mixed),
    
    /**
   * Callback that is called when the text input's text changes.
   */
    onChange?: ?((e: ChangeEvent) => mixed),
    
    /**
   * Callback that is called when the text input's text changes.
   * Changed text is passed as an argument to the callback handler.
   */
    onChangeText?: ?((text: string) => mixed),
    
    /**
   * Callback that is called when the text input's content size changes.
   * This will be called with
   * `{ nativeEvent: { contentSize: { width, height } } }`.
   *
   * Only called for multiline text inputs.
   */
    onContentSizeChange?: ?((e: ContentSizeChangeEvent) => mixed),
    
    /**
   * Callback that is called when text input ends.
   */
    onEndEditing?: ?((e: EditingEvent) => mixed),
    
    /**
   * Called when a touch is engaged.
   */
    onPressIn?: ?((event: PressEvent) => mixed),
    
    /**
   * Called when a touch is released.
   */
    onPressOut?: ?((event: PressEvent) => mixed),
    
    /**
   * Callback that is called when the text input selection is changed.
   * This will be called with
   * `{ nativeEvent: { selection: { start, end } } }`.
   */
    onSelectionChange?: ?((e: SelectionChangeEvent) => mixed),
    
    /**
   * Callback that is called when the text input's submit button is pressed.
   * Invalid if `multiline={true}` is specified.
   */
    onSubmitEditing?: ?((e: EditingEvent) => mixed),
    
    /**
   * Callback that is called when a key is pressed.
   * This will be called with `{ nativeEvent: { key: keyValue } }`
   * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and
   * the typed-in character otherwise including `' '` for space.
   * Fires before `onChange` callbacks.
   */
    onKeyPress?: ?((e: KeyPressEvent) => mixed),
    
    /**
   * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.
   * May also contain other properties from ScrollEvent but on Android contentSize
   * is not provided for performance reasons.
   */
    onScroll?: ?((e: ScrollEvent) => mixed),
    
    /**
   * The string that will be rendered before text input has been entered.
   */
    placeholder?: ?Stringish,
    
    /**
   * The text color of the placeholder string.
   */
    placeholderTextColor?: ?ColorValue,
    
    /**
   * If `true`, the text input obscures the text entered so that sensitive text
   * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.
   */
    secureTextEntry?: ?boolean,
    
    /**
   * The highlight and cursor color of the text input.
   */
    selectionColor?: ?ColorValue,
    
    /**
   * The start and end of the text input's selection. Set start and end to
   * the same value to position the cursor.
   */
    selection?: ?$ReadOnly<
      {|
        start: number,
        end?: ?number,
      |},
    >,
    
    /**
   * The value to show for the text input. `TextInput` is a controlled
   * component, which means the native value will be forced to match this
   * value prop if provided. For most uses, this works great, but in some
   * cases this may cause flickering - one common cause is preventing edits
   * by keeping value the same. In addition to simply setting the same value,
   * either set `editable={false}`, or set/update `maxLength` to prevent
   * unwanted edits without flicker.
   */
    value?: ?Stringish,
    
    /**
   * Provides an initial value that will change when the user starts typing.
   * Useful for simple use-cases where you do not want to deal with listening
   * to events and updating the value prop to keep the controlled state in sync.
   */
    defaultValue?: ?Stringish,
    
    /**
   * If `true`, all text will automatically be selected on focus.
   */
    selectTextOnFocus?: ?boolean,
    
    /**
   * If `true`, the text field will blur when submitted.
   * The default value is true for single-line fields and false for
   * multiline fields. Note that for multiline fields, setting `blurOnSubmit`
   * to `true` means that pressing return will blur the field and trigger the
   * `onSubmitEditing` event instead of inserting a newline into the field.
   */
    blurOnSubmit?: ?boolean,
    
    /**
   * Note that not all Text styles are supported, an incomplete list of what is not supported includes:
   *
   * - `borderLeftWidth`
   * - `borderTopWidth`
   * - `borderRightWidth`
   * - `borderBottomWidth`
   * - `borderTopLeftRadius`
   * - `borderTopRightRadius`
   * - `borderBottomRightRadius`
   * - `borderBottomLeftRadius`
   *
   * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)
   * for more detail.
   *
   * [Styles](docs/style.html)
   */
    style?: ?TextStyleProp,
    
    /**
   * If `true`, caret is hidden. The default value is `false`.
   *
   * On Android devices manufactured by Xiaomi with Android Q,
   * when keyboardType equals 'email-address'this will be set
   * in native to 'true' to prevent a system related crash. This
   * will cause cursor to be diabled as a side-effect.
   *
   */
    caretHidden?: ?boolean,
    
    /*
   * If `true`, contextMenuHidden is hidden. The default value is `false`.
   */
    contextMenuHidden?: ?boolean,
    
    forwardedRef?: ?ReactRefSetter<
      React.ElementRef<HostComponent<mixed>> & ImperativeMethods,
    >,
  |},
>;

type ImperativeMethods = $ReadOnly<
  {|
    clear: () => void,
    isFocused: () => boolean,
    getNativeRef: () => ?React.ElementRef<HostComponent<mixed>>,
  |},
>;

declare function InternalTextInput(props: Props): React.Node;

type TextInputComponentStatics = $ReadOnly<
  {|
    State: $ReadOnly<
      {|
        currentlyFocusedInput: typeof TextInputState.currentlyFocusedInput,
        currentlyFocusedField: typeof TextInputState.currentlyFocusedField,
        focusTextInput: typeof TextInputState.focusTextInput,
        blurTextInput: typeof TextInputState.blurTextInput,
      |},
    >,
    propTypes: typeof DeprecatedTextInputPropTypes,
  |},
>;
export type {ChangeEvent};

export type {TextInputEvent};

export type {ContentSizeChangeEvent};

export type {BlurEvent};
export type {FocusEvent};

export type {SelectionChangeEvent};

export type {KeyPressEvent};

export type {EditingEvent};

export type {KeyboardType};

export type {ReturnKeyType};

export type {AutoCapitalize};

export type {TextContentType};

export type {Props};

declare module.exports: 
  & React.AbstractComponent<
    React.ElementConfig<typeof InternalTextInput>,
    $ReadOnly<
      {|
        ...React.ElementRef<HostComponent<mixed>>,
        ...ImperativeMethods,
      |},
    >,
  >
  & TextInputComponentStatics;
