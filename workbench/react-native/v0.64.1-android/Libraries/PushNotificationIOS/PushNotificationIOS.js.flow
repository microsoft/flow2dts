// @flow
type ContentAvailable = 1 | null | void;

type FetchResult = {
  NewData: string,
  NoData: string,
  ResultFailed: string,
  ...,
};

type PushNotificationEventName = $Keys<
  {
    /**
   * Fired when a remote notification is received. The handler will be invoked
   * with an instance of `PushNotificationIOS`.
   */
    notification: string,
    /**
   * Fired when a local notification is received. The handler will be invoked
   * with an instance of `PushNotificationIOS`.
   */
    localNotification: string,
    /**
   * Fired when the user registers for remote notifications. The handler will be
   * invoked with a hex string representing the deviceToken.
   */
    register: string,
    /**
   * Fired when the user fails to register for remote notifications. Typically
   * occurs when APNS is having issues, or the device is a simulator. The
   * handler will be invoked with {message: string, code: number, details: any}.
   */
    registrationError: string,
    ...,
  },
>;

declare class PushNotificationIOS {
  static FetchResult: FetchResult,
  
  static presentLocalNotification(details: Object): void,
  
  static scheduleLocalNotification(details: Object): void,
  
  static cancelAllLocalNotifications(): void,
  
  static removeAllDeliveredNotifications(): void,
  
  static getDeliveredNotifications(
    callback: (notifications: Array<Object>) => void
  ): void,
  
  static removeDeliveredNotifications(identifiers: Array<string>): void,
  
  static setApplicationIconBadgeNumber(number: number): void,
  
  static getApplicationIconBadgeNumber(callback: Function): void,
  
  static cancelLocalNotifications(userInfo: Object): void,
  
  static getScheduledLocalNotifications(callback: Function): void,
  
  static addEventListener(
    type: PushNotificationEventName,
    handler: Function
  ): void,
  
  static removeEventListener(
    type: PushNotificationEventName,
    handler: Function
  ): void,
  
  static requestPermissions(
    permissions?: {
      alert?: boolean,
      badge?: boolean,
      sound?: boolean,
      ...,
    }
  ): Promise<
    {
      alert: boolean,
      badge: boolean,
      sound: boolean,
      ...,
    },
  >,
  
  static abandonPermissions(): void,
  
  static checkPermissions(callback: Function): void,
  
  static getInitialNotification(): Promise<?PushNotificationIOS>,
  
  /**
   * You will never need to instantiate `PushNotificationIOS` yourself.
   * Listening to the `notification` event and invoking
   * `getInitialNotification` is sufficient
   *
   */
  constructor(nativeNotif: Object): void,
  
  /**
   * This method is available for remote notifications that have been received via:
   * `application:didReceiveRemoteNotification:fetchCompletionHandler:`
   *
   * See https://reactnative.dev/docs/pushnotificationios.html#finish
   */
  finish(fetchResult: string): void,
  
  /**
   * An alias for `getAlert` to get the notification's main message string
   */
  getMessage(): ?string | ?Object,
  
  /**
   * Gets the sound string from the `aps` object
   *
   * See https://reactnative.dev/docs/pushnotificationios.html#getsound
   */
  getSound(): ?string,
  
  /**
   * Gets the category string from the `aps` object
   *
   * See https://reactnative.dev/docs/pushnotificationios.html#getcategory
   */
  getCategory(): ?string,
  
  /**
   * Gets the notification's main message from the `aps` object
   *
   * See https://reactnative.dev/docs/pushnotificationios.html#getalert
   */
  getAlert(): ?string | ?Object,
  
  /**
   * Gets the content-available number from the `aps` object
   *
   * See https://reactnative.dev/docs/pushnotificationios.html#getcontentavailable
   */
  getContentAvailable(): ContentAvailable,
  
  /**
   * Gets the badge count number from the `aps` object
   *
   * See https://reactnative.dev/docs/pushnotificationios.html#getbadgecount
   */
  getBadgeCount(): ?number,
  
  /**
   * Gets the data object on the notif
   *
   * See https://reactnative.dev/docs/pushnotificationios.html#getdata
   */
  getData(): ?Object,
  
  /**
   * Gets the thread ID on the notif
   *
   * See https://reactnative.dev/docs/pushnotificationios.html#getthreadid
   */
  getThreadID(): ?string,
}
export type {ContentAvailable};

export type {FetchResult};

export type {PushNotificationEventName};

declare module.exports: typeof PushNotificationIOS;
