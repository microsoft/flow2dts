// @flow
type Timespan = {
  startTime: number,
  endTime?: number,
  totalTime?: number,
  startExtras?: Extras,
  endExtras?: Extras,
};

type ExtraValue = number | string | boolean;

type Extras = {[key: string]: ExtraValue};

interface IPerformanceLogger {
  addTimespan(
    key: string,
    startTime: number,
    endTime: number,
    startExtras?: Extras,
    endExtras?: Extras
  ): void,
  append(logger: IPerformanceLogger): void,
  clear(): void,
  clearCompleted(): void,
  close(): void,
  currentTimestamp(): number,
  getExtras(): $ReadOnly<{[key: string]: ?ExtraValue,...}>,
  getPoints(): $ReadOnly<{[key: string]: ?number,...}>,
  getPointExtras(): $ReadOnly<{[key: string]: ?Extras,...}>,
  getTimespans(): $ReadOnly<{[key: string]: ?Timespan,...}>,
  hasTimespan(key: string): boolean,
  isClosed(): boolean,
  logEverything(): void,
  markPoint(key: string, timestamp?: number, extras?: Extras): void,
  removeExtra(key: string): ?ExtraValue,
  setExtra(key: string, value: ExtraValue): void,
  startTimespan(key: string, timestamp?: number, extras?: Extras): void,
  stopTimespan(key: string, timestamp?: number, extras?: Extras): void,
}

declare var getCurrentTimestamp: () => number;

declare function createPerformanceLogger(): IPerformanceLogger;
export type {Timespan};

export type {ExtraValue};

export type {Extras};

export type {IPerformanceLogger};

export {getCurrentTimestamp};

export {createPerformanceLogger as default};
