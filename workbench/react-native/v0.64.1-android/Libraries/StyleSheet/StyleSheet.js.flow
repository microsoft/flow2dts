// @flow
declare var flatten: typeof $1;
const $1 = require("./flattenStyle");

import type {____ColorValue_Internal} from "./StyleSheetTypes";
import type {____Styles_Internal} from "./StyleSheetTypes";
import type {____DangerouslyImpreciseStyle_Internal} from "./StyleSheetTypes";
import type {____DangerouslyImpreciseStyleProp_Internal} from "./StyleSheetTypes";
import type {____ViewStyle_Internal} from "./StyleSheetTypes";
import type {____ViewStyleProp_Internal} from "./StyleSheetTypes";
import type {____TextStyle_Internal} from "./StyleSheetTypes";
import type {____TextStyleProp_Internal} from "./StyleSheetTypes";
import type {____ImageStyle_Internal} from "./StyleSheetTypes";
import type {____ImageStyleProp_Internal} from "./StyleSheetTypes";

type ColorValue = ____ColorValue_Internal;

type ViewStyleProp = ____ViewStyleProp_Internal;

type TextStyleProp = ____TextStyleProp_Internal;

type ImageStyleProp = ____ImageStyleProp_Internal;

type DangerouslyImpreciseStyleProp = ____DangerouslyImpreciseStyleProp_Internal;

type TypeForStyleKey<+key: $Keys<____DangerouslyImpreciseStyle_Internal>> = $ElementType<
  ____DangerouslyImpreciseStyle_Internal,
  key,
>;

type ViewStyle = ____ViewStyle_Internal;

type TextStyle = ____TextStyle_Internal;

type ImageStyle = ____ImageStyle_Internal;

type DangerouslyImpreciseStyle = ____DangerouslyImpreciseStyle_Internal;

declare var hairlineWidth: number;

declare var absoluteFill: {|
  position: string,
  left: number,
  right: number,
  top: number,
  bottom: number,
|};
export type {ColorValue};

export type {ViewStyleProp};

export type {TextStyleProp};

export type {ImageStyleProp};

export type {DangerouslyImpreciseStyleProp};

export type {TypeForStyleKey};

export type {ViewStyle};

export type {TextStyle};

export type {ImageStyle};

export type {DangerouslyImpreciseStyle};

declare module.exports: {|
  /**
   * This is defined as the width of a thin line on the platform. It can be
   * used as the thickness of a border or division between two elements.
   * Example:
   * ```
   *   {
   *     borderBottomColor: '#bbb',
   *     borderBottomWidth: StyleSheet.hairlineWidth
   *   }
   * ```
   *
   * This constant will always be a round number of pixels (so a line defined
   * by it look crisp) and will try to match the standard width of a thin line
   * on the underlying platform. However, you should not rely on it being a
   * constant size, because on different platforms and screen densities its
   * value may be calculated differently.
   *
   * A line with hairline width may not be visible if your simulator is downscaled.
   */
  hairlineWidth: typeof hairlineWidth,
  
  /**
   * A very common pattern is to create overlays with position absolute and zero positioning,
   * so `absoluteFill` can be used for convenience and to reduce duplication of these repeated
   * styles.
   */
  absoluteFill: any,
  
  /**
   * Sometimes you may want `absoluteFill` but with a couple tweaks - `absoluteFillObject` can be
   * used to create a customized entry in a `StyleSheet`, e.g.:
   *
   *   const styles = StyleSheet.create({
   *     wrapper: {
   *       ...StyleSheet.absoluteFillObject,
   *       top: 10,
   *       backgroundColor: 'transparent',
   *     },
   *   });
   */
  absoluteFillObject: typeof absoluteFill,
  
  /**
   * Combines two styles such that `style2` will override any styles in `style1`.
   * If either style is falsy, the other one is returned without allocating an
   * array, saving allocations and maintaining reference equality for
   * PureComponent checks.
   */
  compose<T: DangerouslyImpreciseStyleProp>(
    style1: ?T,
    style2: ?T
  ): ?T | $ReadOnlyArray<T>,
  
  /**
   * Flattens an array of style objects, into one aggregated style object.
   * Alternatively, this method can be used to lookup IDs, returned by
   * StyleSheet.register.
   *
   * > **NOTE**: Exercise caution as abusing this can tax you in terms of
   * > optimizations.
   * >
   * > IDs enable optimizations through the bridge and memory in general. Referring
   * > to style objects directly will deprive you of these optimizations.
   *
   * Example:
   * ```
   * const styles = StyleSheet.create({
   *   listItem: {
   *     flex: 1,
   *     fontSize: 16,
   *     color: 'white'
   *   },
   *   selectedListItem: {
   *     color: 'green'
   *   }
   * });
   *
   * StyleSheet.flatten([styles.listItem, styles.selectedListItem])
   * // returns { flex: 1, fontSize: 16, color: 'green' }
   * ```
   * Alternative use:
   * ```
   * StyleSheet.flatten(styles.listItem);
   * // return { flex: 1, fontSize: 16, color: 'white' }
   * // Simply styles.listItem would return its ID (number)
   * ```
   * This method internally uses `StyleSheetRegistry.getStyleByID(style)`
   * to resolve style objects represented by IDs. Thus, an array of style
   * objects (instances of StyleSheet.create), are individually resolved to,
   * their respective objects, merged as one and then returned. This also explains
   * the alternative use.
   */
  flatten: typeof flatten,
  
  /**
   * WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will
   * not be reliably announced. The whole thing might be deleted, who knows? Use
   * at your own risk.
   *
   * Sets a function to use to pre-process a style property value. This is used
   * internally to process color and transform values. You should not use this
   * unless you really know what you are doing and have exhausted other options.
   */
  setStyleAttributePreprocessor(
    property: string,
    process: (nextProp: mixed) => mixed
  ): void,
  
  /**
   * Creates a StyleSheet style reference from the given object.
   */
  create<+S: ____Styles_Internal>(obj: S): $ReadOnly<S>,
|};
