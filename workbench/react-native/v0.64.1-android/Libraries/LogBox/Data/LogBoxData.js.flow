// @flow
import * as React from "react";
import LogBoxLog from "./LogBoxLog";

import type {LogLevel} from "./LogBoxLog";
import type {Message} from "./parseLogBoxLog";
import type {Category} from "./parseLogBoxLog";
import type {ComponentStack} from "./parseLogBoxLog";
import type {ExtendedExceptionData} from "./parseLogBoxLog";

import type {ExtendedError} from "../../Core/Devtools/parseErrorStack";

type LogBoxLogs = Set<LogBoxLog>;
type LogData = $ReadOnly<
  {|
    level: LogLevel,
    message: Message,
    category: Category,
    componentStack: ComponentStack,
  |},
>;

type Observer = (
  $ReadOnly<
    {|
      logs: LogBoxLogs,
      isDisabled: boolean,
      selectedLogIndex: number,
    |},
  >
) => void;

type IgnorePattern = string | RegExp;

type Subscription = $ReadOnly<
  {|
    unsubscribe: () => void,
  |},
>;

type WarningInfo = {|
  finalFormat: string,
  forceDialogImmediately: boolean,
  suppressDialog_LEGACY: boolean,
  suppressCompletely: boolean,
  monitorEvent: string | null,
  monitorListVersion: number,
  monitorSampleRate: number,
|};

type WarningFilter = (format: string) => WarningInfo;

type AppInfo = $ReadOnly<
  {|
    appVersion: string,
    engine: string,
    onPress?: ?(() => void),
  |},
>;

declare function reportLogBoxError(
  error: ExtendedError,
  componentStack?: string
): void;

declare function isLogBoxErrorMessage(message: string): boolean;

declare function isMessageIgnored(message: string): boolean;

declare function addLog(log: LogData): void;

declare function addException(error: ExtendedExceptionData): void;

declare function symbolicateLogNow(log: LogBoxLog): void;

declare function retrySymbolicateLogNow(log: LogBoxLog): void;

declare function symbolicateLogLazy(log: LogBoxLog): void;

declare function clear(): void;

declare function setSelectedLog(proposedNewIndex: number): void;

declare function clearWarnings(): void;

declare function clearErrors(): void;

declare function dismiss(log: LogBoxLog): void;

declare function setWarningFilter(filter: WarningFilter): void;

declare function setAppInfo(info: () => AppInfo): void;

declare function getAppInfo(): ?AppInfo;

declare function checkWarningFilter(format: string): WarningInfo;

declare function addIgnorePatterns(
  patterns: $ReadOnlyArray<IgnorePattern>
): void;

declare function setDisabled(value: boolean): void;

declare function isDisabled(): boolean;

declare function observe(observer: Observer): Subscription;

type SubscribedComponent = React.AbstractComponent<
  $ReadOnly<
    {|
      logs: $ReadOnlyArray<LogBoxLog>,
      isDisabled: boolean,
      selectedLogIndex: number,
    |},
  >,
>;

declare function withSubscription(
  WrappedComponent: SubscribedComponent
): React.AbstractComponent<{||}>;
export type {LogBoxLogs};
export type {LogData};

export type {Observer};

export type {IgnorePattern};

export type {Subscription};

export type {WarningInfo};

export type {WarningFilter};

export {reportLogBoxError};

export {isLogBoxErrorMessage};

export {isMessageIgnored};

export {addLog};

export {addException};

export {symbolicateLogNow};

export {retrySymbolicateLogNow};

export {symbolicateLogLazy};

export {clear};

export {setSelectedLog};

export {clearWarnings};

export {clearErrors};

export {dismiss};

export {setWarningFilter};

export {setAppInfo};

export {getAppInfo};

export {checkWarningFilter};

export {addIgnorePatterns};

export {setDisabled};

export {isDisabled};

export {observe};

export {withSubscription};
