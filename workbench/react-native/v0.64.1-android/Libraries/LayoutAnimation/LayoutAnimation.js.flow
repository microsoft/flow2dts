// @flow
import type {LayoutAnimationType} from "../Renderer/shims/ReactNativeTypes";
import type {LayoutAnimationProperty} from "../Renderer/shims/ReactNativeTypes";
import type {LayoutAnimationConfig as LayoutAnimationConfig_} from "../Renderer/shims/ReactNativeTypes";

type LayoutAnimationConfig = LayoutAnimationConfig_;

type OnAnimationDidEndCallback = () => void;
type OnAnimationDidFailCallback = () => void;

declare function configureNext(
  config: LayoutAnimationConfig,
  onAnimationDidEnd?: OnAnimationDidEndCallback,
  onAnimationDidFail?: OnAnimationDidFailCallback
): void;

declare function create(
  duration: number,
  type: LayoutAnimationType,
  property: LayoutAnimationProperty
): LayoutAnimationConfig;

declare var Presets: {|
  easeInEaseOut: LayoutAnimationConfig,
  linear: LayoutAnimationConfig,
  spring: {|
    duration: number,
    create: {|
      type: string,
      property: string,
    |},
    update: {|
      type: string,
      springDamping: number,
    |},
    delete: {|
      type: string,
      property: string,
    |},
  |},
|};

declare var LayoutAnimation: {|
  /**
   * Schedules an animation to happen on the next layout.
   *
   * @param config Specifies animation properties:
   *
   *   - `duration` in milliseconds
   *   - `create`, `AnimationConfig` for animating in new views
   *   - `update`, `AnimationConfig` for animating views that have been updated
   *
   * @param onAnimationDidEnd Called when the animation finished.
   * Only supported on iOS.
   * @param onError Called on error. Only supported on iOS.
   */
  configureNext: typeof configureNext,
  /**
   * Helper for creating a config for `configureNext`.
   */
  create: typeof create,
  Types: {|
    spring: string,
    linear: string,
    easeInEaseOut: string,
    easeIn: string,
    easeOut: string,
    keyboard: string,
  |},
  Properties: {|
    opacity: string,
    scaleX: string,
    scaleY: string,
    scaleXY: string,
  |},
  checkConfig(...args: Array<mixed>): void,
  Presets: typeof Presets,
  easeInEaseOut: (onAnimationDidEnd?: OnAnimationDidEndCallback) => void,
  linear: (onAnimationDidEnd?: OnAnimationDidEndCallback) => void,
  spring: (onAnimationDidEnd?: OnAnimationDidEndCallback) => void,
|};
export type {LayoutAnimationConfig};

declare module.exports: typeof LayoutAnimation;
