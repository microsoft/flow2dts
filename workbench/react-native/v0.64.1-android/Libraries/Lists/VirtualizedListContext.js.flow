// @flow
import type VirtualizedList from "./VirtualizedList.js";
import * as React from "react";

type Frame = $ReadOnly<
  {
    offset: number,
    length: number,
    index: number,
    inLayout: boolean,
  },
>;

type ChildListState = $ReadOnly<
  {
    first: number,
    last: number,
    frames: {[key: number]: Frame},
  },
>;

type ListDebugInfo = $ReadOnly<
  {
    cellKey: string,
    listKey: string,
    parent: ?ListDebugInfo,
    // We include all ancestors regardless of orientation, so this is not always
    // identical to the child's orientation.
    horizontal: boolean,
  },
>;

type Context = $ReadOnly<
  {
    cellKey: ?string,
    getScrollMetrics: () => {
      contentLength: number,
      dOffset: number,
      dt: number,
      offset: number,
      timestamp: number,
      velocity: number,
      visibleLength: number,
    },
    horizontal: ?boolean,
    getOutermostParentListRef: () => VirtualizedList,
    getNestedChildState: (string) => ?ChildListState,
    registerAsNestedChild: (
      {
        cellKey: string,
        key: string,
        ref: VirtualizedList,
        parentDebugInfo: ListDebugInfo,
      }
    ) => ?ChildListState,
    unregisterAsNestedChild: (
      {
        key: string,
        state: ChildListState,
      }
    ) => void,
    debugInfo: ListDebugInfo,
  },
>;

declare var VirtualizedListContext: React.Context<?Context>;

declare function VirtualizedListContextResetter(
  {
    children: React.Node,
  }
): React.Node;

declare function VirtualizedListContextProvider(
  {
    children: React.Node,
    value: Context,
  }
): React.Node;

declare function VirtualizedListCellContextProvider(
  {
    cellKey: string,
    children: React.Node,
  }
): React.Node;
export type {ChildListState};

export type {ListDebugInfo};

export {VirtualizedListContext};

export {VirtualizedListContextResetter};

export {VirtualizedListContextProvider};

export {VirtualizedListCellContextProvider};
